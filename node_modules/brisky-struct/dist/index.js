const $466859286_removeKey = (t, key) => {
  if (t._ks) {
    const keys = t._ks
    let i = keys.length
    while (i--) {
      if (keys[i] === key) {
        keys.splice(i, 1)
        break
      }
    }
  }
}

const $466859286_removeContextKey = (t, key) => {
  if (!t._ks) {
    const keys = $466859286_getKeys(t.inherits)
    if (keys) {
      const b = []
      for (let i = 0, j = 0, len = keys.length; i < len; i++) {
        if (keys[i] === key) {
          j = 1
        } else {
          b[i - j] = keys[i]
        }
      }
      t._ks = b
    }
  } else {
    $466859286_removeKey(t, key)
  }
}

const $466859286_copy = t => {
  const keys = $466859286_getKeys(t.inherits)
  if (keys) {
    const len = keys.length
    let i = len
    const b = t._ks = []
    while (i--) { b[i] = keys[i] }
    return len
  }
}

const $466859286_addKey = (t, key) => {
  if (!t._ks) {
    const keys = $466859286_getKeys(t.inherits)
    if (keys) {
      const len = keys.length
      let i = len
      const b = t._ks = []
      while (i--) { b[i] = keys[i] }
      b[len] = key
    } else {
      t._ks = [ key ]
    }
  } else {
    t._ks.push(key)
  }
}

const $466859286_getKeys = t => t._ks || t.inherits && $466859286_getKeys(t.inherits)



var $466859286_$ALL$ = {
  removeKey: $466859286_removeKey,
  addKey: $466859286_addKey,
  removeContextKey: $466859286_removeContextKey,
  getKeys: $466859286_getKeys,
  copy: $466859286_copy
}
;var $826337949 = require('stamp')
;const $1695496138_parent = t => {
  if (t._c) {
    if (t._cLevel === 1) {
      return t._c
    } else {
      t._p._cLevel = t._cLevel - 1
      t._p._c = t._c
      return t._p
    }
  } else {
    return t._p
  }
}

const $1695496138_root = (t, real) => {
  var p = t
  if (real) {
    while (p) {
      t = p
      p = p._p
    }
  } else {
    while (p) {
      t = p
      p = $1695496138_parent(p)
    }
  }
  return t
}

// add option for resolve
const $1695496138_path = (t, real) => {
  const result = []
  var parent = t
  while (parent) {
    if (parent._c && !real) {
      let i = parent._cLevel
      let p = parent
      while (i--) {
        result.unshift(p.key)
        p = p._p
      }
      parent = parent._c
    } else if (parent.key) {
      result.unshift(parent.key)
      parent = parent._p
    } else {
      break
    }
  }
  return result
}

const $1695496138_realRoot = t => {
  while (t._p) {
    t = t._p
  }
  return t
}

const $1695496138_realRootPath = (t, path) => {
  while (t._p) {
    path.push(t.key)
    t = t._p
  }
  return t
}

const $1695496138_isAncestor = (t, r, pc) => ((t === r && pc) || (
  t.inherits && $1695496138_isAncestor(t.inherits, r, pc)
) || (
  t._p && $1695496138_isAncestor(t._p, r, pc + 1)
))



var $1695496138_$ALL$ = {
  path: $1695496138_path,
  parent: $1695496138_parent,
  root: $1695496138_root,
  realRoot: $1695496138_realRoot,
  realRootPath: $1695496138_realRootPath,
  isAncestor: $1695496138_isAncestor
}
;



const $2027436227_setContext = (t, c, level) => {
  while (t && level) {
    t._c = c
    t._cLevel = level
    level--
    t = t._p
  }
}

const $2027436227_removeContext = t => {
  while (t && t._c) {
    t._c = null
    t._cLevel = null
    t = t._p
  }
}

const $2027436227_setTStamps = (t, level, stamp) => {
  while (t && level) {
    t.tStamp = stamp
    level--
    t = t._p
  }
}

const $2027436227_subscription = (t, stamp) => {
  if (t.tStamp !== stamp) {
    t.tStamp = stamp
    if (t.subscriptions && !t._inProgressS) {
      t._inProgressS = true
      $826337949.on(() => {
        var i = t.subscriptions.length
        while (i--) { t.subscriptions[i]() }
        t._inProgressS = false
      })
    }
  }
}

// Iterate over given references list
// and fire functions if conditions are met
const $2027436227_iterate = (refs, val, stamp, oRoot, fn, cb) => {
  var i = refs.length
  while (i--) {
    const rPath = []
    const rRoot = $1695496138_realRootPath(refs[i], rPath)
    const pc = $1695496138_isAncestor(oRoot.inherits, rRoot, 1)
    if (pc) {
      let c = oRoot
      let j = rPath.length - pc + 1
      let prev = c
      while (j--) {
        prev = c
        c = c[rPath[j]]
        if (c === void 0) {
          fn(refs[i], val, stamp, prev, j + 1, oRoot, cb)
          if (refs[i].__tStamp !== stamp) {
            refs[i].__tStamp = stamp
            let localRefs = refs[i].emitters &&
              refs[i].emitters.data &&
              refs[i].emitters.data.struct
            if (localRefs) {
              $2027436227_iterate(localRefs, val, stamp, oRoot, fn)
            }
            refs[i].__tStamp = null
          }
          break
        }
      }
      if (c !== void 0) {
        fn(c, val, stamp, void 0, void 0, oRoot)
      }
    }
  }
}

// Fire subscriptions in context
const $2027436227_fnSubscriptions = (t, val, stamp, c, level, oRoot, cb) => {
  if (t.tStamp === stamp) {
    cb = void 0
  }
  if (c === void 0) {
    $2027436227_subscription(t, stamp)
  } else {
    $2027436227_setTStamps(t, level, stamp)
    $2027436227_subscription(c, stamp)
  }
  if (cb) {
    cb(t, stamp, oRoot)
  }
}

// When there's no inherited references
// there can still be a reference to parents
const $2027436227_handleInheritedStruct = (t, stamp, oRoot, first) => {
  if (t.__tStamp !== stamp && (!first || !t._c)) {
    t.__tStamp = stamp
    if (t.inherits) {
      const contextRefs =
        t.inherits.emitters &&
        t.inherits.emitters.data &&
        t.inherits.emitters.data.struct
      if (contextRefs) {
        $2027436227_iterate(contextRefs, void 0, stamp, oRoot, $2027436227_fnSubscriptions, $2027436227_handleInheritedStruct)
      }
      $2027436227_handleInheritedStruct(t.inherits, stamp, oRoot, false)
    }
    if (!first) {
      if (t._p) {
        $2027436227_handleInheritedStruct(t._p, stamp, oRoot, false)
      }
      if (first === false) {
        const localRefs = t.emitters &&
          t.emitters.data &&
          t.emitters.data.struct
        if (localRefs) {
          $2027436227_iterate(localRefs, void 0, stamp, oRoot, $2027436227_fnSubscriptions, $2027436227_handleInheritedStruct)
        }
      }
    }
    t.__tStamp = null
  }
}

// Fire emitters && subscriptions in context
// then clean the context
const $2027436227_fn = (t, val, stamp, c, level, oRoot, cb) => {
  $2027436227_setContext(t, c, level)
  if (c === void 0 || level === 1) {
    $2027436227_subscription(t, stamp)
  } else {
    $2027436227_setTStamps(t, level, stamp)
    $2027436227_subscription(c, stamp)
  }
  const emitter = $2621634261_getData(t)
  if (emitter) {
    const listeners = $2621634261_getFn(emitter)
    if (listeners) {
      let i = listeners.length
      while (i--) {
        listeners[i](val, stamp, t)
      }
    } else {
      emitter.listeners = []
    }
  }
  $2027436227_removeContext(t, c)
  if (cb) {
    cb(t, val, stamp, oRoot)
  }
}

// When there's no local references
// there can be still inherited references
const $2027436227_updateInheritedStruct = (t, val, stamp, oRoot) => {
  while (t.inherits) {
    if (!oRoot) {
      oRoot = $1695496138_realRoot(t)
    }
    const contextRefs =
      t.inherits.emitters &&
      t.inherits.emitters.data &&
      t.inherits.emitters.data.struct
    if (contextRefs) {
      $2027436227_iterate(contextRefs, val, stamp, oRoot, $2027436227_fn, $2027436227_updateInheritedStruct)
    }
    t = t.inherits
  }
}

var $2027436227 = { updateInheritedStruct: $2027436227_updateInheritedStruct, handleInheritedStruct: $2027436227_handleInheritedStruct }

;



const $3988518475_handleStruct = (p, stamp) => {
  if (p.emitters && p.emitters.data && p.emitters.data.struct && p.__tStamp !== stamp && !p._c) {
    p.__tStamp = stamp
    let i = p.emitters.data.struct.length
    while (i--) {
      $3988518475_subscription(p.emitters.data.struct[i], stamp)
      $3988518475_handleStruct(p.emitters.data.struct[i], stamp)
    }
    p.__tStamp = null
  }
}

const $3988518475_subscription = (t, stamp) => {
  t.tStamp = stamp
  if (t._p || t._c) {
    let p = t._c && t._cLevel === 1 ? t._c : t._p
    const oRoot = $1695496138_realRoot(p)
    while (p && (!p.tStamp || p.tStamp !== stamp)) {
      p.tStamp = stamp
      $3988518475_handleStruct(p, stamp)
      $2027436227_handleInheritedStruct(p, stamp, oRoot, true)

      if (p.subscriptions) $3988518475_exec(p)
      p = p._p
    }
  }
  if (t.subscriptions) $3988518475_exec(t)
}

const $3988518475_exec = t => {
  if (!t._inProgressS) {
    t._inProgressS = true
    $826337949.on(() => {
      var i = t.subscriptions.length
      while (i--) { t.subscriptions[i]() }
      t._inProgressS = false
    })
  }
}

var $3988518475 = $3988518475_subscription

;



const $2147961271_strip = t => {
  while (t && t._c) {
    t._c = null
    t._cLevel = null
    t = t._p
  }
}

const $2147961271_update = (context, t, val, stamp, key, resolve, level, j, fn) => {
  if (!(key in context)) {
    let n = j
    if (n) $2147961271_strip(context) // dont trust this, also heavy
    resolve._c = context
    resolve._cLevel = level
    $3988518475(context, stamp)
    while (n--) { fn[n](val, stamp, t) }
    if (context._p) {
      if ($2147961271_exec(t, val, stamp, context._p, context.key, context, 1, j, fn)) {
        context._c = null
        context._cLevel = null
      }
    }
    if (context.instances) {
      let i = context.instances.length
      while (i--) {
        $2147961271_update(context.instances[i], t, val, stamp, key, resolve, level, j, fn)
      }
    }
    return true
  }
}

const $2147961271_exec = (t, val, stamp, parent, key, resolve, level, j, fn) => {
  var clear
  if (parent.instances) {
    let i = parent.instances.length
    while (i--) {
      if ($2147961271_update(parent.instances[i], t, val, stamp, key, resolve, level, j, fn)) {
        clear = true
      }
    }
  }
  if (parent._p) {
    if ($2147961271_exec(t, val, stamp, parent._p, parent.key, resolve, level + 1, j, fn)) {
      clear = true
    }
  }
  return clear
}

// removal
const $2147961271_remove = (t, stamp) => {
  const data = $2621634261_getData(t)
  if (data) {
    const fn = $2621634261_getFn(data)
    if (fn) {
      let i = fn.length
      while (i--) { fn[i](null, stamp, t) }
    }
  }
  const keys = $466859286_getKeys(t)
  if (keys) {
    for (let i = 0, len = keys.length; i < len; i++) {
      let nest = $2621634261_get(t, keys[i])
      if (nest) {
        $2147961271_remove(nest, stamp)
        nest._c = null
        nest._cLevel = null
      }
    }
  }
}

const $2147961271_updateRemove = (context, t, stamp, key, resolve, level) => {
  if (!(key in context)) {
    resolve._c = context
    resolve._cLevel = level
    $3988518475(context, stamp)
    $2147961271_remove(t, stamp)
    if (context._p) {
      if ($2147961271_execRemove(t, stamp, context._p, context.key, context, 1)) {
        context._c = null
        context._cLevel = null
      }
    }
    if (context.instances) {
      let i = context.instances.length
      while (i--) {
        $2147961271_updateRemove(context.instances[i], t, stamp, key, resolve, level)
      }
    }
    return true
  }
}

const $2147961271_execRemove = (t, stamp, context, key, resolve, level) => {
  var clear
  if (context.instances) {
    let i = context.instances.length
    while (i--) {
      if ($2147961271_updateRemove(context.instances[i], t, stamp, key, resolve, level)) {
        clear = true
      }
    }
  }
  if (context._p) {
    if ($2147961271_execRemove(t, stamp, context._p, context.key, resolve, level + 1)) {
      clear = true
    }
  }
  return clear
}

const $2147961271_removeContext = (context, key, stamp) => {
  const t = $2621634261_get(context, key)
  if (t) {
    if (stamp) $2147961271_updateRemove(context, t, stamp, key, t, 1)
    t._c = null
    t._cLevel = null
  }
}



var $2147961271_$ALL$ = {
  removeContext: $2147961271_removeContext,
  exec: $2147961271_exec
}
;





const $2633820941_resolveContext = (t, val, stamp, reset, noConflict) => {
  let level = t._cLevel
  var cntx = t._c
  let key
  if (cntx._c) {
    cntx = $2633820941_resolveContext(cntx, void 0, stamp)
  }
  if (level > 1) {
    let path = []
    let parent = t._p
    while (--level) {
      path.unshift(parent.key)
      parent = parent._p
    }
    // need to happen for every step.. also when making an instance
    // basicly it allways needs to happen on create...
    key = path[0]
    let inherits = $2621634261_get(cntx, key, true)
    $2633820941_contextProperty(cntx, void 0, stamp, key, inherits)
    inherits._c = null
    inherits._cLevel = null
    cntx = cntx[key]
    for (let i = 1, len = path.length; i < len; i++) {
      key = path[i]
      inherits = $2621634261_get(cntx, key, true)
      cntx[key] = $4292174816_create(inherits, void 0, stamp, cntx, key)
      inherits._c = null
      inherits._cLevel = null
      cntx = cntx[key]
    }
    key = t.key
  } else {
    key = t.key
  }
  t._c = null
  t._cLevel = null
  return $2633820941_contextProperty(cntx, val, stamp, key, $2621634261_get(cntx, key, true), reset, noConflict)
}

const $2633820941_contextProperty = (t, val, stamp, key, property, reset, noConflict) => {
  if (val === null) {
    $2147961271_removeContext(t, key, stamp)
    t[key] = null
    $466859286_removeContextKey(t, key)
    return val
  } else {
    return $4292174816_create(property, val, stamp, t, key, reset, noConflict)
  }
}

/**
 * @function storeContext
 * stores context for reapplying with applyContext
 * @todo: needs perf optmization
 * @return {array} returns store
 */
const $2633820941_storeContext = t => {
  var context = t._c
  if (context) {
    const arr = []
    let level = t._cLevel
    while (context) {
      arr.push(context, level)
      level = context._cLevel
      context = context._c
    }
    return arr
  }
}

/**
 * @function applyContext
 * applies context to base
 */
const $2633820941_applyContext = (t, store) => {
  if (store) {
    const l = store.length
    let ret
    for (let i = 0, target = t; i < l; i += 2) {
      let context = store[i]
      let level = store[i + 1]
      let path = [ target ]
      let newTarget = $2633820941_setContext(target, context, level, path)
      let struct = $2633820941_handleChange(target, context, path, level)
      if (ret === void 0 && struct !== void 0) {
        ret = struct
      }
      if (newTarget) target = newTarget
    }
    return ret
  } else {
    if (t._c) {
      t._c = null
      t._cLevel = null
    }
  }
}

const $2633820941_handleChange = (target, context, path, level) => {
  var newContext, newLevel
  var travelTaget = context
  if (context._p && context._p[context.key] === null) {
    return null
  }
  for (let i = 0, len = path.length; i < len; i++) {
    let segment = path[i]
    let field = $2621634261_get(travelTaget, segment.key)
    // delete does not work.... like this does not set null anymore
    if (!field || field.val === null) {
      $2633820941_removeContext(target, level)
      return null
    } else if (field !== segment) {
      segment._c = null
      segment._cLevel = null
      newContext = field
      newLevel = len - (i + 1)
    }
    travelTaget = field
    if (i === len - 1) target = travelTaget
  }
  if (newContext) {
    if (!newLevel) {
      $2633820941_removeContext(target, level)
    } else {
      $2633820941_setContext(target, newContext, newLevel)
    }
    return target
  }
}

const $2633820941_setContext = (target, context, level, path) => {
  if (level) {
    target._cLevel = level
    target._c = context
    if (level > 1) {
      let p = target._p
      for (let i = 1; p && i < level; i++) {
        if (path) { path.unshift(p) }
        p._c = context
        p._cLevel = target._cLevel - i
        p = p._p
      }
    }
    return context
  }
}

const $2633820941_removeContext = (target, level) => {
  if (level) {
    target._cLevel = null
    target._c = null
    if (level > 1) {
      let p = target._p
      for (let i = 1; p && i < level; i++) {
        p._c = null
        p._cLevel = null
        p = p._p
      }
    }
  }
}

const $2633820941_setPathContext = (t, oRoot) => {
  const rPath = []
  const rRoot = $1695496138_realRootPath(t, rPath)
  var level = $1695496138_isAncestor(oRoot.inherits, rRoot, 1)
  if (level) {
    level = rPath.length - level + 1
    let c = oRoot
    let test = c
    while (level--) {
      c = test
      test = test[rPath[level]]
      if (test === void 0) {
        level++
        while (t && level) {
          t._c = c
          t._cLevel = level
          t = t._p
          level--
        }
        break
      }
    }
    if (test !== void 0) {
      return test
    }
  }
}

const $2633820941_correctContext = (t, oRoot) => {
  var p = t
  while (p) {
    if (p._c) {
      p._c = null
      p._cLevel = null
    }
    p = p._p
  }
  if ($1695496138_realRoot(t) !== oRoot) {
    t = $2633820941_setPathContext(t, oRoot) || t
  }
  t._rc = oRoot
  return t
}

// make some tests but obvisouly usefull
// const clearContext = (t, level) => {
//   var parent = t
//   var i = 0
//   if (!level) level = t._cLevel
//   while (parent && i < level) {
//     parent._c = null
//     parent._cLevel = null
//     parent = i === 1 ? parent._c : parent._p
//     i++
//   }
//   return this
// }



var $2633820941_$ALL$ = {
  contextProperty: $2633820941_contextProperty,
  resolveContext: $2633820941_resolveContext,
  applyContext: $2633820941_applyContext,
  storeContext: $2633820941_storeContext,
  setPathContext: $2633820941_setPathContext,
  correctContext: $2633820941_correctContext
}
;

const $1442998772_get = (t, key) => t[key] || t.inherits && $1442998772_get(t.inherits, key)

const $1442998772_listener = (t, val, key, stamp) => {
  if (key in t) {
    const result = t[key]
    if (result) {
      if (result !== val) {
        const isFn = typeof result === 'function'
        $1442998772_replace(isFn ? t.fn : t.struct, result, val)
        if (val === null) {
          t[key] = null
        } else {
          t[key] = val
        }
      }
    } else if (val !== null) {
      $1442998772_add(t, val, key)
    }
  } else {
    const result = $1442998772_get(t.inherits, key)
    if (result && typeof result === 'function') {
      if (result !== val) {
        if (t.fn) {
          $1442998772_replace(t.fn, result, val)
        } else {
          t.fn = $1442998772_copyContext($2621634261_getFn(t), result, val)
        }
        t[key] = val
      }
    } else if (val !== null) {
      $1442998772_add(t, val, key)
    }
  }
}

const $1442998772_add = (t, val, key) => {
  if (typeof val === 'function') {
    $1442998772_addFn(t, val)
  } else {
    $1442998772_addStruct(t, val)
  }
  t[key] = val
}

const $1442998772_copyContext = (arr, val, replacement) => {
  const b = []
  if (!replacement) {
    for (let i = 0, j = 0, len = arr.length; i < len; i++) {
      if (arr[i] === val) {
        j = 1
      } else {
        b[i - j] = arr[i]
      }
    }
  } else {
    let i = arr.length
    while (i--) {
      if (arr[i] === val) {
        b[i] = replacement
      } else {
        b[i] = arr[i]
      }
    }
  }
  return b
}

const $1442998772_replace = (arr, val, replacement) => {
  for (let i = 0, len = arr.length; i < len; i++) {
    if (arr[i] === val) {
      if (replacement) {
        arr.splice(i, 1, replacement)
      } else {
        arr.splice(i, 1)
      }
      break
    }
  }
}

const $1442998772_create = (arr, val) => {
  if (arr) {
    let i = arr.length
    const b = [ val ]
    while (i--) { b[i + 1] = arr[i] }
    return b
  } else {
    return [ val ]
  }
}

const $1442998772_addFn = (t, val) => {
  if (!t.fn) {
    t.fn = $1442998772_create($2621634261_getFn(t), val)
  } else {
    t.fn.unshift(val)
  }
}

const $1442998772_addStruct = (t, val) => {
  if (!t.struct) {
    t.struct = [ val ]
  } else {
    t.struct.unshift(val)
  }
}



var $1442998772_$ALL$ = {
  addFn: $1442998772_addFn,
  listener: $1442998772_listener,
  replace: $1442998772_replace
}
;var $3258224650_cnt = 1e4 // so now a limition becomes 10k fns normal
const $3258224650_uid = t => { return t._uid || (t._uid = ++$3258224650_cnt) }
const $3258224650_cuid = t => {
  if (t._c) {
    var id = 5381
    while (t) {
      id = (id * 33) ^ $3258224650_uid(t)
      t = t._cLevel === 1 ? t._c : t._p
    }
    return id >>> 0
  } else {
    return $3258224650_uid(t) - 1e4
  }
}
const $3258224650_hash = (id, str) => {
  if (isFinite(str)) {
    str = parseFloat(str)
    return id * 33 ^ str
  } else {
    var i = str.length
    while (i) {
      id = (id * 33) ^ str.charCodeAt(--i)
    }
    return id
  }
}
const $3258224650_puid = t => {
  var id = 5381
  var p = t
  if (t._c) {
    while (p) {
      let key = p.key
      if (key !== void 0) {
        id = $3258224650_hash(id, key)
        p = p._cLevel === 1 ? p._c : p._p
      } else {
        return id >>> 0
      }
    }
    return id >>> 0
  } else if (t._puid) {
    return t._puid
  } else {
    while (p) {
      let key = p.key
      if (key !== void 0) {
        id = $3258224650_hash(id, key)
        p = p._p
      } else {
        return (t._puid = id >>> 0)
      }
    }
    return (t._puid = id >>> 0)
  }
}



var $3258224650_$ALL$ = {
  uid: $3258224650_uid,
  cuid: $3258224650_cuid,
  puid: $3258224650_puid
}
;


const $3815974835_whitelist = key =>
  key === 'root' ||
  key === 'parent' ||
  key === 'compute' ||
  key === 'origin'

var $3815974835 = (t, key, val, stamp, noContext) => {
  var bind
  // if typeof key === 'fn' // do somethign as well -- super nice extra

  if (typeof key === 'object') {
    if (val !== void 0) {
      for (let i = 0, len = key.length; t && i < len; i++) {
        bind = t
        t = $2621634261_getOrigin(t, key[i], noContext)
        if (!t) {
          let ret = $4292174816_set(bind, { [key[i]]: i === len - 1 ? val : {} }, stamp)
          if (ret && ret.inherits) { bind = ret }
          t = $2621634261_get(bind, key[i], noContext)
        }
        if (typeof t === 'function') { t = bind[key[i]]() }
      }
    } else {
      for (let i = 0, len = key.length; t && i < len; i++) {
        bind = t
        t = $2621634261_getOrigin(t, key[i], noContext)
        if (typeof t === 'function' && $3815974835_whitelist(key[i])) { t = bind[key[i]]() }
      }
    }
    return t
  } else {
    bind = t
    t = $2621634261_getOrigin(t, key, noContext)
    if (!t && val !== void 0) {
      $4292174816_set(bind, { [key]: val }, stamp)
      t = $2621634261_get(bind, key, noContext)
    } else {
      if (typeof t === 'function' && $3815974835_whitelist(key)) { t = bind[key]() }
    }
    return t
  }
}

;






const $2164199530_reference = (t, val, stamp) => $4292174816_set(t, $3815974835(t, val.slice(1), {}, stamp))

const $2164199530_removeReference = t => {
  if (t.val && typeof t.val === 'object' && t.val.inherits) {
    $1442998772_listener(t.val.emitters.data, null, $3258224650_uid(t))
  }
}

const $2164199530_vinstances = (instances, cRoot) => {
  let i = instances.length
  let fallback
  while (i--) {
    const vinstance = instances[i].instances &&
      $2164199530_vinstances(instances[i].instances, cRoot)
    if (vinstance !== void 0) {
      return vinstance
    } else {
      const vRoot = $1695496138_realRoot(instances[i])
      if (cRoot === vRoot) {
        return instances[i]
      } else if (cRoot.inherits === vRoot) {
        fallback = instances[i]
      }
    }
  }
  if (fallback) {
    $2633820941_setPathContext(fallback, cRoot)
  }
  return fallback
}

const $2164199530_getRefVal = (t, struct, noContext) => {
  if (t.val !== void 0 && t.val !== null) {
    const vinstance = t._rc && t.val.instances &&
      $2164199530_vinstances(t.val.instances, $1695496138_realRoot(t._rc))
    if (vinstance) {
      t._rc = void 0
      return vinstance
    } else if (t.val.inherits) {
      if (t._rc && t._c && !noContext) {
        $2633820941_setPathContext(t.val, $1695496138_realRoot(t._c))
      }
      t.val._rc = t._rc || t
      t._rc = void 0
      return t.val
    } else if (!struct) {
      t._rc = void 0
      return t.val
    }
  } else if (t.inherits) {
    t.inherits._rc = t._rc || t
    t._rc = void 0
    const result = $2164199530_getRefVal(t.inherits, struct, noContext)
    if (!noContext && result && result.inherits) {
      result._c = t
      result._cLevel = 1
    }
    return result
  } else if (t._rc) {
    t._rc = void 0
  }
}



var $2164199530_$ALL$ = {
  reference: $2164199530_reference,
  removeReference: $2164199530_removeReference,
  getRefVal: $2164199530_getRefVal
}
;


const $2621634261_get = (t, key, noContext) => {
  if (key in t) {
    const result = t[key]
    if (!noContext && result && result.inherits && key !== 'val') {
      if (t._c) {
        result._c = t._c
        result._cLevel = t._cLevel + 1
      } else if (result._c) {
        result._c = null
        result._cLevel = null
      }
    }
    return result
  } else if (t.inherits) {
    const result = $2621634261_get(t.inherits, key, true)
    if (!noContext && result && result.inherits && key !== 'val') {
      result._c = t
      result._cLevel = 1
    }
    return result
  }
}

const $2621634261_getOrigin = (t, key, noContext) => {
  if (t) {
    let result = $2621634261_get(t, key, noContext)
    if (result !== void 0 && result !== null) {
      result._rc = t._rc || result._c
      if (t._rc) {
        t._rc = void 0
      }
      return result
    } else {
      const clean = t
      t = $2164199530_getRefVal(t, true, noContext)
      clean._rc = void 0
      if (t) {
        return $2621634261_getOrigin(t, key, noContext)
      }
    }
  }
}

const $2621634261_getContextOrigin = (t, key, oRoot) => {
  if (t) {
    t = $2633820941_correctContext(t, oRoot)
    return $2621634261_getOrigin(t, key, void 0)
  }
}

const $2621634261_getProps = t => t.props || $2621634261_getProps(t.inherits)

// if you removed it dont return...
const $2621634261_getData = t => t.emitters && t.emitters.data || t.inherits && $2621634261_getData(t.inherits)

// same here
const $2621634261_getFn = t => t.fn || t.inherits && $2621634261_getFn(t.inherits)

const $2621634261_getDefault = t => t.props && t.props.default.struct || $2621634261_getDefault(t.inherits)

const $2621634261_getVal = t => t.val !== void 0 ? t.val : t.inherits && $2621634261_getVal(t.inherits)



var $2621634261_$ALL$ = {
  get: $2621634261_get,
  getDefault: $2621634261_getDefault,
  getOrigin: $2621634261_getOrigin,
  getContextOrigin: $2621634261_getContextOrigin,
  getData: $2621634261_getData,
  getFn: $2621634261_getFn,
  getVal: $2621634261_getVal,
  getProps: $2621634261_getProps
}
;




const $2092109398_onGeneric = (t, key) => t.emitters && t.emitters[key] ||
  t.inherits && $2092109398_onGeneric(t.inherits, key)

const $2092109398_overrideSubscription = (t, override, stamp, isNew) => {
  t.stamp = override
  $3988518475(t, stamp)
  if (t._p && !isNew) {
    if ($2147961271_exec(t, void 0, stamp, t._p, t.key, t, 1, 0)) {
      t._c = null
      t._cLevel = null
    }
  }
}

const $2092109398_fn = (t, val, stamp, emitter, noContext) => {
  const listeners = $2621634261_getFn(emitter)
  if (listeners) {
    let i = listeners.length
    if (i && t._p && !noContext) {
      if ($2147961271_exec(t, val, stamp, t._p, t.key, t, 1, i, listeners)) {
        let clear = t
        while (clear && clear._c) {
          clear._c = null
          clear._cLevel = null
          clear = clear._p
        }
      }
    }
    while (i--) { listeners[i](val, stamp, t) }
  } else {
    emitter.listeners = []
  }
}

const $2092109398_data = (t, val, stamp, override, isNew) => {
  if (!t.stamp || t.stamp !== stamp) {
    t.stamp = override || stamp
    $3988518475(t, stamp)
    const own = t.emitters && t.emitters.data
    if (own) {
      const struct = own.struct
      $2092109398_fn(t, val, stamp, own)
      if (struct) {
        let i = struct.length
        while (i--) { $2092109398_updateStruct(struct[i], val, stamp, override) }
      }
    } else {
      const emitter = $2621634261_getData(t.inherits)
      if (emitter) {
        $2092109398_fn(t, val, stamp, emitter)
      } else {
        if (t._p && !isNew) {
          if ($2147961271_exec(t, val, stamp, t._p, t.key, t, 1, 0)) {
            t._c = null
            t._cLevel = null
          }
        }
      }
    }
    $2027436227_updateInheritedStruct(t, val, stamp)
  }
}

const $2092109398_updateStruct = (t, val, stamp, override) => {
  $2092109398_data(t, val, stamp, override)
  if (t.instances) {
    let i = t.instances.length
    while (i--) {
      if (t.instances[i].val === void 0) {
        $2092109398_updateStruct(t.instances[i], val, stamp, override)
      }
    }
  }
}

const $2092109398_generic = (t, type, val, stamp) => {
  if (type === 'data') {
    $2092109398_data(t, val, stamp)
  } else {
    const emitter = $2092109398_onGeneric(t, type)
    if (emitter) { $2092109398_fn(t, val, stamp, emitter, true) }
  }
}



var $2092109398_$ALL$ = {
  data: $2092109398_data,
  generic: $2092109398_generic,
  overrideSubscription: $2092109398_overrideSubscription
}
;




const $624523381_property = (t, val, key, stamp, struct, isNew, reset, noConflict) => {
  var changed
  const result = $2621634261_get(t, key)
  if (result && result.inherits) {
    if (result._c) {
      // also need to do some stuff here
      // if (global.DEBUG) console.log('context set', result.path())
      $2633820941_contextProperty(t, val, stamp, key, result, reset, noConflict)
    } else {
      $4292174816_set(result, val, stamp, void 0, reset, noConflict)
      changed = val === null
    }
  } else {
    changed = true
    $466859286_addKey(t, key)
    $4292174816_create(struct, val, stamp, t, key, reset, noConflict)
  }
  return changed
}

const $624523381_propertyNE = (t, val, key, stamp, struct, isNew, reset, noConflict) => {
  var changed
  const result = $2621634261_get(t, key)
  if (result && result.inherits) {
    if (result._c) {
      // also need to do some stuff here
      $2633820941_contextProperty(t, val, stamp, key, result, reset, noConflict)
    } else {
      $4292174816_set(result, val, stamp, void 0, reset, noConflict)
      changed = val === null
    }
  } else {
    changed = true
    $4292174816_create(struct, val, stamp, t, key, reset, noConflict)
  }
  return changed
}

const $624523381_getProp = (t, key) => t.props
  ? key && (key in t.props && t.props[key]) || t.props.default
  : $624523381_getProp(t.inherits, key)



var $624523381_$ALL$ = {
  getProp: $624523381_getProp,
  property: $624523381_property,
  propertyNE: $624523381_propertyNE
}
;




const $2264940719_getKeyProp = (t, key) => t.props
  ? key && (key in t.props && t.props[key])
  : $2264940719_getKeyProp(t.inherits, key)

const $2264940719_props = (t, inherits) => {
  if (t.props) {
    let own
    for (let key in t.props) {
      const prop = $624523381_getProp(inherits, key)
      if (!prop || t.props[key].struct != prop.struct) { // eslint-disable-line
        if (!own) own = {}
        own[key] = t.props[key]
      }
    }
    return own
  }
}

const $2264940719_switchInheritance = (t, inherits, stamp, fromInstance) => {
  var inheritsKeys, keys
  const old = t.inherits
  if (!old) return
  const instances = old.instances
  const tProps = $2264940719_props(t, old)
  t.inherits = inherits

  if (tProps) {
    const previous = $2621634261_getProps(inherits)
    const props = t.props = {}

    for (let key in previous) {
      props[key] = previous[key]
    }
    for (let key in tProps) {
      if (tProps[key].struct) {
        $2264940719_switchInheritance(tProps[key].struct, (
          (tProps.default ? $2264940719_getKeyProp(t, key) : tProps.default) || $624523381_getProp(t, key)
        ).struct)
        props[key] = tProps[key]
      }
    }
  }

  if (t._ks && (inheritsKeys = $466859286_getKeys(inherits))) {
    if (!keys) keys = []
    for (let i = 0, len = inheritsKeys.length; i < len; i++) {
      const key = inheritsKeys[i]
      if (!(key in t)) keys.push(key)
    }
    for (let i = 0, len = t._ks.length; i < len; i++) {
      const key = t._ks[i]
      if (key in t) {
        keys.push(key)
        const prop = $624523381_getProp(t, key)
        if (prop.struct) {
          $2264940719_switchInheritance(t[key], $2621634261_get(inherits, key, true) || prop.struct, stamp)
        }
        // '  PROPS ON NEW INHERITANCE IS NOT A STRUCT -- switching inheritance - not supported yet', key)
      }
    }
    t._ks = keys
  }

  if (inherits !== old) {
    if (instances) {
      let i = instances.length
      while (i--) {
        if (instances[i] === t) {
          instances.splice(i, 1)
          break
        }
      }
    }
    if (inherits.instances !== false) {
      if (!inherits.instances) inherits.instances = []
      inherits.instances.push(t)
    }
  }

  const inheritsEmitters = $2621634261_get(inherits, 'emitters', true)

  if (t.emitters) {
    const keys = $466859286_getKeys(t.emitters)
    if (keys) {
      for (let i = 0, len = keys.length; i < len; i++) {
        $2264940719_handleEmitters(t, t.emitters, inheritsEmitters, keys[i])
      }
    }
  }

  if (t.instances) {
    for (let i = 0, len = t.instances.length; i < len; i++) {
      $2264940719_switchInheritance(t.instances[i], t, stamp, true)
    }
  }

  if (stamp && !fromInstance) $2092109398_data(t, void 0, stamp, false)
}

// ok so need to make a nice list of shit with keys make a new object
const $2264940719_inheritedEmitter = (emitter, result = {}) => {
  $2264940719_eachListener(emitter, (listener, key) => {
    if (typeof listener === 'function' && !(key in result)) {
      result[key] = listener
    }
  })
  if (emitter.inherits) $2264940719_inheritedEmitter(emitter.inherits, result)
  return result
}

const $2264940719_eachListener = (emitter, fn) => {
  for (let key in emitter) {
    if (
      key !== '_p' &&
      key !== 'key' &&
      key !== 'fn' &&
      key !== '_c' &&
      key !== '_cLevel' &&
      key !== 'instances' &&
      key !== 'inherits'
    ) {
      fn(emitter[key], key)
    }
  }
}

const $2264940719_handleEmitters = (t, emitters, inherits, key) => {
  const emitter = emitters[key]
  const inheritsEmitter = inherits && $2621634261_get(inherits, key, true)
  const fn = emitter.fn
  const newFn = []

  $2264940719_eachListener(emitter, (listener, key) => {
    if (typeof listener === 'function') newFn.push(listener)
  })

  if (fn) {
    const inheritsFn = inheritsEmitter && $2621634261_getFn(inheritsEmitter)
    if (inheritsFn) {
      const result = $2264940719_inheritedEmitter(inheritsEmitter)
      for (let key in result) {
        if (!(key in emitter)) {
          newFn.push(result[key])
        }
      }
    }
  }

  emitter.fn = newFn
}



var $2264940719_$ALL$ = {
  switchInheritance: $2264940719_switchInheritance
}
;



const $1506544200_update = (t, val, key, resolved, from) => {
  if (!(key in t)) {
    if (key !== 'val') {
      if (val[key] !== null) {
        if (!resolved) {
          if (t._ks) {
            $466859286_addKey(t, key)
          } else {
            $466859286_copy(t)
            return 1
          }
        }
      }
    }
    return true
  } else {
    if (val[key] === null && t[key]) {
      // do removal better
      if (!t._ks) {
        $466859286_copy(t)
        $466859286_addKey(t, key)
        return 1
      } else {
        $466859286_addKey(t, key) // no update
      }
    } else if (t[key] && from[key]) {
      $2264940719_switchInheritance(t[key], from[key])
    }
  }
}

const $1506544200_propertyKeys = (t, val, stamp, changed, resolved, override, from) => {
  var j = changed.length
  var inherits
  if (t.instances) {
    while (j--) {
      let key = changed[j]
      let res = $1506544200_update(t, val, key, resolved, from)
      if (res) {
        if (res !== true) { resolved = res }
        if (!inherits) {
          inherits = [ key ]
        } else {
          inherits.push(key)
        }
      }
    }
    if (inherits) {
      if (stamp) { $2092109398_data(t, val, stamp, override) }
      $1506544200_propertyChange(t, val, stamp, inherits, resolved, override)
    }
  } else {
    while (j--) {
      inherits = $1506544200_update(t, val, changed[j], resolved, from)
      if (inherits === 1) { resolved = inherits }
    }
    if (inherits && stamp) {
      $2092109398_data(t, val, stamp, override)
    }
  }
}

const $1506544200_propertyChange = (t, val, stamp, changed, resolved, override, from) => {
  const instances = t.instances
  let i = instances.length
  while (i--) {
    let instance = instances[i]
    $1506544200_propertyKeys(instance, val, stamp, changed, resolved, override, from)
  }
}

const $1506544200_valChange = (t, val, stamp, changed, override) => {
  const instances = t.instances
  let i = instances.length
  while (i--) {
    let instance = instances[i]
    if (instance.val === void 0) {
      if (stamp) { $2092109398_data(instance, val, stamp, override) }
      if (instance.instances) { $1506544200_valChange(instance, val, stamp, changed, override) }
    }
  }
}

const $1506544200_instances = (t, val, stamp, changed, override) => {
  if (changed === true) {
    $1506544200_valChange(t, val, stamp, changed, override)
  } else {
    $1506544200_propertyChange(t, val, stamp, changed, void 0, override, t)
  }
}

var $1506544200 = $1506544200_instances

;





const $2839414644_remove = (t, stamp, override, instance, from) => {
  if (!t) {
    // when remvoing something that does not exist
    return
  }
  if (t._async) { delete t._async }

  if (t.val && typeof t.val === 'object' && t.val.inherits) {
    $1442998772_listener(t.val.emitters.data, null, $3258224650_uid(t))
  }

  if (!instance && t.inherits.instances) {
    const instances = t.inherits.instances
    let i = instances.length
    while (i--) {
      if (instances[i] === t) {
        instances.splice(i, 1)
        break
      }
    }
  }

  if (t.emitters && t.emitters.data && t.emitters.data.struct) {
    let s = t.emitters.data.struct.length
    while (s--) {
      let struct = t.emitters.data.struct[s]
      if (struct.val === t) struct.val = null
    }
  }

  if (!instance) {
    if (stamp) {
      $2092109398_data(t, null, stamp, override)
    }
    if (t._ks) {
      const keys = t._ks
      for (let i = 0, len = keys.length; i < len; i++) {
        if (keys[i] in t) {
          $2839414644_remove(t[keys[i]], stamp, override, false, true)
          i--
          len--
        } else {
          $2147961271_removeContext(t, keys[i], stamp)
        }
      }
    } else {
      const keys = $466859286_getKeys(t)
      if (keys) {
        for (let i = 0, len = keys.length; i < len; i++) {
          $2147961271_removeContext(t, keys[i], stamp)
        }
      }
    }
  } else {
    if (stamp) { $2092109398_data(t, null, stamp, override) }
    if (t._ks) {
      const keys = t._ks
      for (let i = 0, len = keys.length; i < len; i++) {
        if (keys[i] in t) {
          $2839414644_remove(t[keys[i]], stamp, override, false, true)
          i--
          len--
        }
      }
    }
  }

  const instances = t.instances
  if (instances) {
    let i = instances.length
    while (i--) { $2839414644_remove(instances[i], stamp, override, true) }
    t.instances = null
  }

  $2839414644_removeFromParent(t._p, t.key, stamp, override, false, from)

  return true
}

const $2839414644_removeFromParent = (parent, key, stamp, override, instance, from) => {
  if (parent && key) {
    if (!instance || parent._ks) {
      $466859286_removeKey(parent, key)
      if (instance) {
        if (key in parent) { delete parent[key] }
      } else {
        parent[key] = null
      }
    }
    if (!from && stamp) {
      $2092109398_data(parent, { [key]: null }, stamp, override)
    }
    const instances = parent.instances
    if (instances) {
      let i = instances.length
      while (i--) {
        $2839414644_removeFromParent(instances[i], key, stamp, override, true)
      }
    }
  }
}

var $2839414644 = $2839414644_remove

;




const $2411079736_getType = (parent, type, t, stamp) => {
  if (typeof type === 'object') {
    if (type.inherits) {
      return type
    } else if (type.val && type.stamp !== void 0) {
      type = type.val
    } else {
      if (!type._created) {
        type._created = $4292174816_create($624523381_getProp(t).struct, type, stamp, parent)
      }
      return type._created
    }
  }
  let result = $2411079736_getTypeInternal(parent, type, t)
  if (!result) {
    // create type
    // console.log('no result - create type', type)
    parent = $1695496138_root(parent)
    $4292174816_set(parent, { types: { [type]: {} } }, stamp)
    result = parent.types[type]
  }
  return result
}

// setTimeout(() => {
//   console.log(cnt, obj)
// }, 1e3)

const $2411079736_getTypeInternal = (parent, type, t) =>
  (!t || typeof type === 'string' || typeof type === 'number') &&
  (
    parent.types && $2621634261_get(parent.types, type) ||
    parent.inherits && $2411079736_getTypeInternal(parent.inherits, type) ||
    parent._p && $2411079736_getTypeInternal(parent._p, type)
  )

var $2411079736 = $2411079736_getType

;


// create set obj can go away

// need to add listeners??? -- this is a rly strange case...

// has to happen when you create an instance of soemthing and change the type... rly weird
const $3658148266_createSetObj = (t, top) => {
  const result = {}
  const keys = t._ks
  if (t.type && !top) result.type = t.type.compute()
  if (keys) {
    for (let i = 0, len = keys.length; i < len; i++) {
      let key = keys[i]
      let field = t[key]
      if (field) result[key] = $3658148266_createSetObj(field, false)
    }
  }
  if (t.val !== void 0) result.val = t.val
  return result
}

var $3658148266_obj = {}

const $3658148266_createType = (parent, val, t, stamp, key) => {
  const type = val.type
  const constructor = $2411079736(parent, type, t, stamp) || t

  if (typeof val.type === 'object' && !val.type.stamp) {
    delete val.type
  }
  const instance = new constructor.Constructor()
  instance.inherits = constructor
  // console.log('count')
  // if (typeof type === 'object') {
  //   // console.log('--->', type)
  // }
  $3658148266_obj[type] = $3658148266_obj[type] ? $3658148266_obj[type] + 1 : 1
  if (constructor.instances !== false) {
    if (!constructor.instances) {
      constructor.instances = [ instance ]
    } else {
      constructor.instances.push(instance)
    }
  }

  //   if (constructor !== t && key && t.key === key && !val.reset && (t._ks || t.val !== void 0)) {

  if (constructor !== t && key && t.key === key && (t._ks || t.val !== void 0)) {
    // this has to become stronger / better
    // also need to call merge in the update path from original
    // need to handle types better -- from original to context and vice-versa
    $4292174816_set(instance, $3658148266_createSetObj(t, true, instance), stamp)
  }
  return instance
}

var $3658148266 = $3658148266_createType

;




var $2380202644_uid = 0
const $2380202644_extendSet = (t, val, stamp, context) => {
  if (t._c) {
    t._c = null
    t._cLevel = null
  }
  if (stamp) {
    $4292174816_set(t, val, $826337949.create())
    $826337949.close()
  } else {
    $4292174816_set(t, val)
  }
}

const $2380202644_error = (t, err, stamp) => {
  if (err) {
    $826337949.inProgress = false
    $2092109398_generic($1695496138_root(t), 'error', err, stamp)
  }
}

const $2380202644_isGeneratorFunction = obj => {
  const constructor = obj.constructor
  return constructor && (constructor.name === 'GeneratorFunction' ||
    constructor.displayName === 'GeneratorFunction') ||
    typeof constructor.prototype.next === 'function'
}

const $2380202644_generator = (t, val, stamp) => $2380202644_iterator(t, val(t, stamp), stamp)

const $2380202644_promiseQueue = (t, uid, val, error) => {
  if (t.async) {
    for (let i = 0, end = t.async.length - 2; i < end; i += 3) {
      if (t.async[i + 2] === uid) {
        t.async[i] = val
        t.async[i + 2] = void 0
        if (i === 0) { $2380202644_execPromise(t) }
        break
      }
    }
  }
}

const $2380202644_done = t => {
  t.async.splice(0, 3)
  if (t.async.length) { $2380202644_queue(t) }
  if (t.async && !t.async.length) {
    delete t.async
  }
}

const $2380202644_queue = t => {
  const async = t.async[0]
  if (async && async.next) {
    $2380202644_execIterator(t, async, t.async[1], t.async[2], $2380202644_done)
  } else if (!t.async[2]) {
    $2380202644_execPromise(t)
  }
}

const $2380202644_execPromise = t => {
  const async = t.async[0]
  if (async !== void 0) {
    if (Array.isArray(async)) {
      for (let i = 0, len = async.length; i < len; i++) {
        $2380202644_extendSet(t, async[i], t.async[1])
      }
    } else {
      $2380202644_extendSet(t, async, t.async[1])
    }
  }
  $2380202644_done(t)
}

const $2380202644_next = (iteratee, t, stamp, val) => {
  try {
    return iteratee.next()
  } catch (err) {
    $2380202644_error(t, err, stamp)
    $2380202644_done(t)
  }
}

const $2380202644_execIterator = (t, iteratee, stamp, id, done, val) => {
  if (t.async && t.async[2] === id) {
    if (!val || !val.done) {
      if (val !== void 0) {
        if (
          val.value &&
          typeof val.value === 'object' &&
          typeof val.value.then === 'function'
        ) {
          val.value
          .then(resolved => {
            if (t.async && t.async[2] === id) {
              $2380202644_extendSet(t, resolved, stamp)
              $2380202644_execIterator(t, iteratee, stamp, id, done, $2380202644_next(iteratee, t, stamp))
            }
          })
          .catch(err => {
            if (t.async && t.async[2] === id) {
              $2380202644_error(t, err, stamp)
              $2380202644_execIterator(t, iteratee, stamp, id, done, $2380202644_next(iteratee, t, stamp))
            }
          })
        } else {
          $2380202644_extendSet(t, val.value, stamp)
          $2380202644_execIterator(t, iteratee, stamp, id, done, $2380202644_next(iteratee, t, stamp))
        }
      } else {
        $2380202644_execIterator(t, iteratee, stamp, id, done, $2380202644_next(iteratee, t, stamp))
      }
    } else if (val.done) {
      done(t)
    }
  }
}

const $2380202644_iterator = (t, iteratee, stamp, val) => {
  const id = ++$2380202644_uid
  if (!t.async) {
    t.async = [ iteratee, stamp, id ]
    // time out is a temp solution
    // should work with bs.on ofcourse....
    // bs.on(() => {
    //   queue(t)
    // })
    setTimeout(() => $2380202644_queue(t))
  } else {
    t.async.push(iteratee, stamp, id)
  }
}

const $2380202644_promise = (t, promise, stamp) => {
  const id = ++$2380202644_uid
  if (!t.async) {
    t.async = [ void 0, stamp, id ]
    $2380202644_queue(t)
  } else {
    t.async.push(void 0, stamp, id)
  }
  promise
    .then(val => $2380202644_promiseQueue(t, id, val))
    .catch(err => {
      $2380202644_error(t, err, stamp)
      $2380202644_promiseQueue(t, id, void 0, err)
    })
}



var $2380202644_$ALL$ = {
  isGeneratorFunction: $2380202644_isGeneratorFunction,
  promise: $2380202644_promise,
  generator: $2380202644_generator,
  iterator: $2380202644_iterator
}
;











const $4292174816_create = (t, val, stamp, parent, key, reset, noConflict) => {
  var instance
  const hasType = val &&
    typeof val === 'object' &&
    val.type && $624523381_getProp(t, 'type') !== $624523381_getProp(t, 'default')
  if (parent) {
    if (hasType) {
      instance = $3658148266(parent, val, t, stamp, key)
    } else {
      instance = new t.Constructor()
      instance.inherits = t
      if (t.instances !== false) {
        if (!t.instances) {
          t.instances = [ instance ]
        } else {
          t.instances.push(instance)
        }
      }
    }
    instance._p = parent
    if (key !== void 0) {
      instance.key = key
      parent[key] = instance
    }
  } else {
    if (hasType && typeof val.type === 'object') {
      instance = $3658148266(parent, val, t, stamp, key)
    } else {
      instance = new t.Constructor()
      instance.inherits = t
      if (t.instances !== false) {
        if (!t.instances) {
          t.instances = [ instance ]
        } else {
          t.instances.push(instance)
        }
      }
    }
  }
  if (val !== void 0) {
    $4292174816_set(instance, val, stamp, true, reset, noConflict)
  }

  return instance
}

// reset functions
const $4292174816_removeAllFields = (t, stamp) => {
  const keys = $466859286_getKeys(t)
  let changed
  if (keys) {
    let i = keys.length
    while (i--) {
      if (keys[i] in t) {
        $2839414644(t[keys[i]], stamp)
        changed = true
      }
    }
  }
  return changed
}

const $4292174816_removeSomeFields = (t, stamp, val, changed, isBool) => {
  const keys = $466859286_getKeys(t)
  if (!val.val && t.val !== void 0) {
    val.val = void 0
    if (isBool) {
      changed = true
    } else if (!changed) {
      changed = []
    }
  }
  if (keys) {
    let i = keys.length
    while (i--) {
      const key = keys[i]
      if (!(key in val) && (key in t)) {
        $2839414644(t[key], stamp)
        if (isBool) {
          changed = true
        } else {
          if (!changed) {
            changed = [ key ]
          } else {
            changed.push(key)
          }
        }
      }
    }
  }
  return changed
}
// --------------

const $4292174816_overrideObjects = (t, val, stamp, isNew, reset, noConflict) => {
  const override = val.stamp

  // conflict resolution
  if (override && t.stamp && !noConflict && Math.abs(t.stamp) > Math.abs(override)) {
    return false
  }

  if (!stamp) stamp = override // also need to use this for _t stmap but not for travel :/

  if (val.val === null) {
    return $2839414644(t, stamp, override)
  } else {
    if (t.instances) {
      let changed
      for (let key in val) {
        if (key !== 'stamp') {
          const result = key !== 'val'
              ? $624523381_getProp(t, key)(t, val[key], key, stamp, isNew, reset, noConflict)
              : $4292174816_setVal(t, val.val, stamp, 1)
          if (result) {
            if (!changed) {
              changed = result === 2 ? [] : [ key ]
            } else if (result !== 2) {
              changed.push(key)
            }
          }
        }
      }

      if (reset) {
        const changeNest = $4292174816_removeSomeFields(t, stamp, val, changed)
        if (!changed) changed = changeNest
      }

      if (changed) {
        if (stamp) { $2092109398_data(t, val, stamp, override, isNew) }
        $1506544200(t, val, stamp, changed, override)
        return true
      } else if (stamp !== t.tStamp) {
        // need to apply tStamp from override but not for the travel parts
        $2092109398_overrideSubscription(t, override, stamp, isNew)
      }
    } else {
      let changed
      for (let key in val) {
        if (key !== 'stamp') {
          if (
            key !== 'val'
              ? $624523381_getProp(t, key)(t, val[key], key, stamp, isNew, reset, noConflict)
              : $4292174816_setVal(t, val.val, stamp, 1)
          ) {
            changed = true
          }
        }
      }

      if (reset && $4292174816_removeSomeFields(t, stamp, val, void 0, true)) changed = true

      if (changed) {
        if (stamp) { $2092109398_data(t, val, stamp, override, isNew) }
        return true
      } else if (stamp !== t.tStamp) {
        $2092109398_overrideSubscription(t, override, stamp, isNew)
      }
    }
  }
}

const $4292174816_objects = (t, val, stamp, isNew, reset, noConflict) => {
  if (val.stamp) {
    return $4292174816_overrideObjects(t, val, stamp, isNew, reset, noConflict)
  } else if (t.instances) {
    let changed
    for (let key in val) {
      if (key !== 'stamp') {
        const result = key !== 'val'
            ? $624523381_getProp(t, key)(t, val[key], key, stamp, isNew, reset, noConflict)
            : $4292174816_setVal(t, val.val, stamp, 1)
        if (result) {
          if (!changed) {
            changed = result === 2 ? [] : [ key ]
          } else if (result !== 2) {
            changed.push(key)
          }
        }
      }
    }
    if (reset) {
      const changeNest = $4292174816_removeSomeFields(t, stamp, val, changed)
      if (!changed) changed = changeNest
    }
    if (changed) {
      if (stamp) { $2092109398_data(t, val, stamp, false, isNew) }
      $1506544200(t, val, stamp, changed)
      return true
    }
  } else {
    let changed
    for (let key in val) {
      if (
        key !== 'val'
          ? $624523381_getProp(t, key)(t, val[key], key, stamp, isNew, reset, noConflict)
          : $4292174816_setVal(t, val.val, stamp, 1)
      ) {
        changed = true
      }
    }

    if (reset && $4292174816_removeSomeFields(t, stamp, val, void 0, true)) changed = true

    if (changed) {
      if (stamp) { $2092109398_data(t, val, stamp, false, isNew) }
      return true
    }
  }
}

const $4292174816_set = (t, val, stamp, isNew, reset, noConflict) => {
  if (t._c) {
    return $2633820941_resolveContext(t, val, stamp, reset, noConflict)
  } else {
    const type = typeof val
    if (type === 'function') {
      if ($2380202644_isGeneratorFunction(val)) {
        $2380202644_generator(t, val, stamp)
      } else if ($4292174816_setVal(t, val, stamp)) {
        if (reset) $4292174816_removeAllFields(t, stamp)
        return $4292174816_isChanged(t, val, stamp, isNew)
      } else if (reset && $4292174816_removeAllFields(t, stamp)) {
        return $4292174816_isChanged(t, val, stamp, isNew)
      }
    } else if (type === 'object') {
      if (!val) {
        return $2839414644(t, stamp)
      } else {
        if (val.inherits) {
          if ($4292174816_setVal(t, val, stamp, true)) {
            if (reset) $4292174816_removeAllFields(t, stamp)
            return $4292174816_isChanged(t, val, stamp, isNew)
          } else if (reset && $4292174816_removeAllFields(t, stamp)) {
            return $4292174816_isChanged(t, val, stamp, isNew)
          }
        } else if (val.then && typeof val.then === 'function') {
          // handle reset :X ?
          $2380202644_promise(t, val, stamp)
        } else if (val.next && typeof val.next === 'function') {
          // handle reset :X ?
          $2380202644_iterator(t, val, stamp)
        } else if (val[0] && val[0] === '@') {
          if ($2164199530_reference(t, val, stamp)) {
            if (reset) $4292174816_removeAllFields(t, stamp)
            return $4292174816_isChanged(t, val, stamp, isNew)
          } else if (reset && $4292174816_removeAllFields(t, stamp)) {
            return $4292174816_isChanged(t, val, stamp, isNew)
          }
        } else {
          return $4292174816_objects(t, val, stamp, isNew, reset, noConflict)
        }
      }
    } else if ($4292174816_setVal(t, val, stamp)) {
      if (reset) $4292174816_removeAllFields(t, stamp)
      return $4292174816_isChanged(t, val, stamp, isNew)
    } else if (reset && $4292174816_removeAllFields(t, stamp)) {
      return $4292174816_isChanged(t, val, stamp, isNew)
    }
  }
}

const $4292174816_isChanged = (t, val, stamp, isNew) => {
  if (stamp) { $2092109398_data(t, val, stamp, false, isNew) }
  if (t.instances) { $1506544200(t, val, stamp, true) }
  return true
}

const $4292174816_getOnProp = t => t.props && t.props.on || $4292174816_getOnProp(t.inherits)

const $4292174816_onContext = (t, context) => {
  if (t.emitters) {
    if (context) {
      t.emitters._c = context
      t.emitters._cLevel = 1
    }
  } else if (t.inherits) {
    $4292174816_onContext(t.inherits, context || t)
  }
}

const $4292174816_setVal = (t, val, stamp, ref) => {
  if (t.val !== val) {
    if (ref) {
      if (ref === 1) {
        if (typeof val === 'object') {
          if (!val.inherits) {
            if (val[0] && val[0] === '@') {
              return $2164199530_reference(t, val, stamp)
            } else {
              $2164199530_removeReference(t)
              if (val.then && typeof val.then === 'function') {
                $2380202644_promise(t, val, stamp)
                return
              } else if (val.next && typeof val.next === 'function') {
                $2380202644_iterator(t, val, stamp)
                return
              }
              t.val = val
              return true
            }
          }
        } else {
          $2164199530_removeReference(t)
          t.val = val
          return true
        }
      }
      $2164199530_removeReference(t)
      t.val = val
      if (val.emitters) {
        if (!val.emitters.data) {
          $4292174816_getOnProp(val)(val, { data: void 0 }, 'on')
        }
        $1442998772_listener(val.emitters.data, t, $3258224650_uid(t))
      } else {
        $4292174816_onContext(val)
        $4292174816_getOnProp(val)(val, { data: void 0 }, 'on')
        $1442998772_listener(val.emitters.data, t, $3258224650_uid(t))
      }
    } else {
      $2164199530_removeReference(t)
      t.val = val
    }
    return true
  }
}



var $4292174816_$ALL$ = {
  set: $4292174816_set,
  create: $4292174816_create
}
;







const $430509040_inheritType = t => t.type || t.inherits && $430509040_inheritType(t.inherits)

const $430509040_type = (t, val, key, stamp, isNew, original) => {
  var isObject
  if (typeof val === 'object') {
    if (!val) {
      // 'remove type' -- not supported yet...
    } else if (val.stamp && val.val && !val.inherits) {
      if (!stamp) stamp = val.stamp
      val = val.val
    } else if (val.inherits) {
      isObject = true
      return
    } else {
      isObject = true
      return
    }
  }

  if (!isNew && t._p) {
    if (isObject) {
      // 'switch using object - not supported yet'
    } else {
      let type = t.type || $430509040_inheritType(t)
      type = type && type.compute()
      if (type !== val) {
        $2264940719_switchInheritance(t, $2411079736(t._p, val, t, stamp), stamp)
        // if (original.reset) set(t, { reset: true }, stamp) // maybe deprecate this...
      }
    }
  }

  if (t.type) {
    return $4292174816_set(t.type, val, stamp) && 2
  } else {
    t.type = $4292174816_create($624523381_getProp(t, key).struct, val, stamp, t, key)
    return 2
  }
}

const $430509040_inherits = (prop, t) => {
  while (t) {
    if (t === prop) return true
    t = t.inherits
  }
}

const $430509040_types = struct => {
  const types = (t, val, key, stamp) => {
    // decided to not support references, when using a struct it automaticly becomes the type
    var changed
    if (!t.types) {
      const prop = $624523381_getProp(t, key).struct
      let cntx = $2621634261_get(t, 'types')
      if (cntx && !$430509040_inherits(prop, cntx)) cntx = false
      t.types = $4292174816_create(cntx || prop, void 0, stamp, t, key)
      if (!cntx) changed = 2
    }
    $4292174816_set(t.types, val, stamp)
    return changed
  }

  types.struct = $4292174816_create(struct, {
    instances: false,
    props: {
      default: (t, val, key, stamp, isNew) => {
        var changed
        const result = $2621634261_get(t, key)
        if (result) {
          if (result._c) {
            $2633820941_contextProperty(t, val, stamp, key, result)
          } else {
            $4292174816_set(result, val, stamp)
            changed = val === null
          }
        } else {
          $466859286_addKey(t, key)
          if (val === 'self') {
            t[key] = t._p
          } else if (typeof val === 'object' && val.inherits) {
            t[key] = val
          } else {
            $4292174816_create($2621634261_getDefault(t._p), val, stamp, t, key)
          }
          changed = true
        }
        return changed
      }
    }
  })

  types.struct.props.default.struct = $430509040_type.struct = struct
  $4292174816_set(struct, { props: { type: $430509040_type, types }, types: { struct } })
  struct.types._ks = void 0 // remove struct key
  struct.type = $4292174816_create(struct, 'struct')
}


var $430509040_getType = $2411079736;
var $430509040_$ALL$ = {
  types: $430509040_types,
  getType: $2411079736
}
;

const $1998416981_inject = (t, val, stamp) => typeof val === 'function'
  ? val(t, val, stamp)
  : $4292174816_set(t, val, stamp)

var $1998416981 = (t, val, key, stamp) => {
  var changed
  if (Array.isArray(val)) {
    for (let i = 0, len = val.length; i < len; i++) {
      if ($1998416981_inject(t, val[i], stamp)) {
        changed = true
      }
    }
  } else {
    changed = $1998416981_inject(t, val, stamp)
  }
  return changed
}

;



var $506167339 = struct => {
  const emitter = $4292174816_create(struct, {
    instances: false,
    props: { default: $1442998772_listener }
  })

  const update = (t, val, key, original) => {
    if (!(key in t)) {
      const field = val[key]
      if (!field || typeof field === 'function') {
        if (field === null) {
          $1442998772_replace(t.fn, original[key])
        } else {
          $1442998772_addFn(t, field)
        }
        return true
      }
    }
  }

  const instances = (t, val, original, fields) => {
    let i = t.instances.length
    while (i--) {
      let instance = t.instances[i]
      if (instance.fn) {
        if (!fields) { fields = Object.keys(val) }  // can use something else for perf
        let j = fields.length
        if (instance.instances) {
          let inherits
          while (j--) {
            let key = fields[j]
            if (update(instance, val, key, original)) {
              if (!inherits) {
                inherits = [ key ]
              } else {
                inherits.push(key)
              }
            }
          }
          if (inherits) { instances(instance, val, original, inherits) }
        } else {
          while (j--) { update(instance, val, fields[j], original) }
        }
      } else if (instance.instances) {
        instances(instance, val, original, fields)
      }
    }
  }

  const emitterProperty = (t, val, key, stamp) => {
    if (val && key in t && t.instances) {
      const field = t[key]
      if (field) { instances(field, val, field) }
    }
    return $624523381_property(t, val, key, stamp, emitter)
  }

  emitterProperty.struct = emitter

  const getOn = t => t.emitters || t.inherits && getOn(t.inherits)

  const onStruct = $4292174816_create(struct, {
    instances: false,
    props: {
      default: emitterProperty
    }
  })

  const on = (t, val, key, stamp) => {
    if (val) {
      if (typeof val === 'function') {
        val = { data: { _val: val } }
      } else {
        for (let key in val) {
          let emitter = val[key]
          if (emitter) {
            if (typeof emitter === 'function') {
              val[key] = { _val: emitter }
            } else {
              if (emitter.val) {
                emitter._val = emitter.val
                delete emitter.val
              }
            }
          }
        }
      }
    }
    const result = getOn(t)
    if (result) {
      if (!t.emitters) {
        $4292174816_create(result, val, stamp, t, 'emitters')
      } else {
        $4292174816_set(result, val, stamp)
      }
    } else {
      $4292174816_create(onStruct, val, stamp, t, 'emitters')
    }
  }

  struct.props.on = on
  on.struct = onStruct
}

;






const $3707563476_struct = {}

const $3707563476_props = {
  inject: $1998416981,
  _created: (t, val) => { t._created = val },
  async: (t, val) => { if (t.async && !val) { delete t.async } },
  key: (t, val) => { t.key = val },
  instances: (t, val) => { t.instances = val },
  $transform: (t, val) => { t.$transform = val },
  props: (t, val, pkey, stamp) => {
    var props = t.props
    if (!props) {
      const previous = $2621634261_getProps(t)
      props = t.props = {}
      if (previous) {
        for (let key in previous) {
          props[key] = previous[key]
        }
      }
    }
    for (let key in val) {
      $3707563476_parse(t, val[key], key, stamp, props)
    }
  }
}

const $3707563476_simple = (t, val, key) => { t[key] = val }

// key should be 4th argument
const $3707563476_notSelf = (t, key, struct) => t.props &&
  t.props[key] && t.props[key].struct === struct ||
  t.inherits && $3707563476_notSelf(t.inherits, key, struct)

const $3707563476_parse = (t, val, key, stamp, props) => {
  if (val === true) {
    props[key] = $3707563476_simple
  } else if (val === null) {
    t[key] = null
    if (props[key]) { delete props[key] }
  } else if (typeof val !== 'function') {
    let struct
    const p = val.nonEnumerable ? $624523381_propertyNE : $624523381_property
    delete val.nonEnumerable
    if (typeof val === 'object' && val.inherits) {
      struct = val
    } else if (val === 'self') {
      struct = t
    } else {
      const inherit = props[key] && props[key].struct
      if (inherit) {
        if ($3707563476_notSelf(t.inherits, key, inherit)) {
          struct = $4292174816_create(inherit, val, void 0, t)
        } else {
          $4292174816_set(inherit, val)
          return
        }
      } else {
        struct = $4292174816_create($2621634261_getDefault(t), val, void 0, t)
      }
    }

    const definition = (t, val, key, stamp, isNew, reset, noConflict) =>
      p(t, val, key, stamp, struct, isNew, reset, noConflict)

    definition.struct = struct
    props[key] = definition
  } else {
    props[key] = val
  }
}

const $3707563476_define = (t, value, key) => {
  Object.defineProperty(t, key, { configurable: true, value })
  return t
}

const $3707563476_createConstructor = (t, Inherit) => {
  function Struct () {}
  if (Inherit) { Struct.prototype = new Inherit() }
  $3707563476_define(Struct.prototype, Struct, 'Constructor')
  $3707563476_define(t, Struct, 'Constructor')
  return Struct
}

$3707563476_struct.instances = false
$3707563476_struct.props = $3707563476_props

$3707563476_createConstructor($3707563476_struct)

$3707563476_struct.props.define = (t, val) => {
  var proto
  if (!t.hasOwnProperty('Constructor')) {
    $3707563476_createConstructor(t, t.Constructor)
  }
  proto = t.Constructor.prototype
  for (let key in val) {
    $3707563476_define(t, val[key], key)
    $3707563476_define(proto, val[key], key)
  }
}

$3707563476_props.default = (t, val, key, stamp) => $624523381_property(t, val, key, stamp, $3707563476_struct)
$3707563476_props.default.struct = $3707563476_struct
$3707563476_struct.inherits = {}

$1998416981($3707563476_struct, [ $506167339, $430509040_types ])

var $3707563476 = $3707563476_struct

;


const $958575751_origin = (t) => {
  var result
  while (t) {
    result = t
    t._rc = t._rc || t._c
    t = $2164199530_getRefVal(t, true)
    result._rc = void 0
  }
  return result
}

const $958575751_contextOrigin = (t, oRoot) => {
  if (t) {
    t = $2633820941_correctContext(t, oRoot)
    return $958575751_origin(t)
  }
}

const $958575751_transform = t => t.$transform !== void 0
  ? t.$transform
  : t.inherits && $958575751_transform(t.inherits)

const $958575751_compute = (t, val, passon, arg) => {
  if (val === void 0) {
    t._rc = t._rc || t._c
    val = $2164199530_getRefVal(t)
  }
  if (val) {
    const type = typeof val
    if (type === 'object') {
      if (val.inherits) {
        const v = $958575751_compute(val, void 0, passon, arg)
        if (v !== void 0) {
          val = v
        }
      }
    } else if (type === 'function') {
      val = val(val, passon || t)
    }
  }
  if (t._rc) {
    t._rc = void 0
  }
  const trans = $958575751_transform(t)
  return trans ? trans(val, passon || t, arg) : val
}



var $958575751_$ALL$ = {
  origin: $958575751_origin,
  compute: $958575751_compute,
  contextOrigin: $958575751_contextOrigin
}
;


var $2030617653_uid = 0

var $2030617653 = (t, check, callback) => {
  var id = 'O' + ++$2030617653_uid
  if (!callback) {
    let promise
    if (check === void 0) {
      promise = new Promise(resolve => $2030617653_on(t, id, (t, val, stamp) => {
        resolve(t, val, stamp)
        return true
      }))
    } else {
      promise = new Promise(resolve => {
        if (!$2030617653_evaluate(resolve, check, t)) {
          $2030617653_on(t, id, (val, stamp, t) => $2030617653_evaluate(resolve, check, t, val, stamp, true))
        }
      })
    }
    return promise
  } else {
    if (check === void 0) {
      $2030617653_on(t, id, (val, stamp, t) => {
        callback(val, stamp, t)
        return true
      })
    } else {
      if (!$2030617653_evaluate(callback, check, t)) {
        $2030617653_on(t, id, (val, stamp, t) => $2030617653_evaluate(callback, check, t, val, stamp))
      }
    }
    return id
  }
}

const $2030617653_evaluate = (resolve, check, t, val, stamp, promise) => {
  if (typeof check === 'function'
      ? check(t, val, stamp)
      : $958575751_compute(t) == check //eslint-disable-line
    ) {
    if (stamp && !promise) {
      $826337949.on(() => resolve(val, stamp, t))
    } else {
      resolve(val, stamp, t)
    }
    return true
  }
}

const $2030617653_on = (top, id, listener) => {
  const context = $4292174816_set(top, {
    on: {
      data: {
        [id]: (val, stamp, t) => {
          if (!t._c) {
            if (listener(val, stamp, t)) {
              $4292174816_set(t, { on: { data: { [id]: null } } })
            }
          }
        }
      }
    }
  })
  if (context && context.inherits) { top = context }
  return top
}

;


const $2137229723_remove = (subs, cb, tree, oRoot) => {
  var t = tree.$t

  // if (tree.$tc) {
  //   if (tree.$stored) {
  //     tree.$stored.unshift(tree.$tc, tree.$tcl || 1)
  //     applyContext(t, tree.$stored)
  //   } else {
  //     applyContext(t, [ tree.$tc, tree.$tcl ])
  //   }
  // }

  if (subs.val) {
    t = $2633820941_correctContext(t, oRoot)
    cb(t, 'remove', subs, tree)
  }
  if (!subs.$blockRemove) {
    $3975723928_diff(t, subs, cb, tree, true, void 0, oRoot)
  }
  const key = tree._key
  const parent = tree._p
  if (parent.$keys) {
    if (Array.isArray(parent.$keys)) {
      parent.$keys.splice(key, 1)
      const len = parent.$keys.length
      let i = len
      if (tree.$c) {
        while (i-- > key) {
          parent.$keys[i]._key = i
        }
        if (parent.$c && parent.$c[len]) {
          $2137229723_composite(parent, len)
        }
      } else {
        while (i-- > key) {
          parent.$keys[i]._key = i
        }
      }
    } else {
      if (tree.$c && parent.$c[key]) { $2137229723_composite(parent, key) }
      delete parent.$keys[key]
    }
  } else {
    if (tree.$c) { $2137229723_composite(parent, key) }
    delete parent[key]
  }
}

const $2137229723_empty = (obj) => {
  for (let key in obj) {
    return false
  }
  return true
}

const $2137229723_composite = (tree, key) => {
  var rootClear
  while (tree) {
    if (tree.$c) {
      if (tree.$c[key]) {
        if (tree.$c[key] === 'root') { rootClear = true }
        delete tree.$c[key]
        if ($2137229723_empty(tree.$c)) {
          delete tree.$c
          key = tree._key
          tree = tree._p
        } else {
          if (rootClear) {
            let block
            for (let i in tree.$c) {
              if (tree.$c[i] === 'root') {
                block = true
                break
              }
            }
            if (!block) { $2137229723_clearRootComposite(tree) }
          }
          break
        }
      }
    } else {
      if (rootClear && tree._key === 'parent') {
        $2137229723_clearRootComposite(tree)
      }
      break
    }
  }
}

const $2137229723_clearRootComposite = tree => {
  tree = tree._p
  var key = 'parent'
  var cnt = 0
  while (tree) {
    if (key === 'root') {
      break
    } else {
      if (key === 'parent') {
        cnt++
      } else if (key[0] !== '$') {
        cnt--
      }
      if (tree.$c && tree.$c[key]) {
        if (cnt > 0) {
          tree.$c[key] = 'parent'
          for (var i in tree.$c) {
            if (i !== key) {
              if (tree.$c[i] === 'root') {
                tree = false
              }
            }
          }
          if (tree) {
            key = tree._key
            tree = tree._p
          }
        } else {
          delete tree.$c[key]
          if ($2137229723_empty(tree.$c)) {
            delete tree.$c
            key = tree._key
            tree = tree._p
          } else {
            break
          }
        }
      } else {
        key = tree._key
        tree = tree._p
      }
    }
  }
}

var $2137229723 = $2137229723_remove

;





const $4215657123_store = (t, branch) => {
  if (t._c._c) {
    branch.$stored = $2633820941_storeContext(t._c)
  }
  branch.$tc = t._c
  if (t._cLevel > 1) {
    branch.$tcl = t._cLevel
  }
}

const $4215657123_dummy = 0

const $4215657123_switchuid = t => {
  var uid = 5381
  while (t && t.val && typeof t.val === 'object' && t.val.inherits) {
    t = t.val
    uid * 33 ^ $3258224650_puid(t)
  }
  return uid >>> 0
}

const $4215657123_update = (key, t, subs, cb, tree, c, parent, oRoot) => {
  var branch = tree[key]
  var changed
  if (t) {
    const stamp = t.tStamp || $4215657123_dummy

    t = $2633820941_correctContext(t, oRoot)

    if (!branch) {
      branch = tree[key] = { _p: parent || tree, _key: key, $t: t }
      branch.$ = stamp
      if (t._c) { $4215657123_store(t, branch) }
      if (subs.val) {
        if (subs.val === 'shallow') {
          branch.$s = t.stamp
        }
        cb(t, 'new', subs, branch)
        changed = true
      }
      changed = $3975723928_diff(t, subs, cb, branch, void 0, void 0, oRoot) || changed
    } else if (branch.$ !== stamp || branch.$t !== t || branch.$tc != t._c) { //eslint-disable-line
      if (subs.val) {
        if (subs.val === 'shallow') {
          const $s = t.stamp
          if (branch.s$ !== $s || branch.$t !== t) {
            branch.s$ = $s
            changed = true
            cb(t, 'update', subs, branch)
          }
        } else if (
          // will become parsed -- with intergers -- also switcgh returns will be parsed
          subs.val === true ||
          (subs.val === 'switch' && (
            branch.$t !== t ||
            // (delete / void 0 field later)
            branch.$tc != t._c || // eslint-disable-line
            (t.val && typeof t.val === 'object' && t.val.inherits && branch.$val !== $4215657123_switchuid(t)) ||
            branch.$val // means removed reference
          ))
        ) {
          changed = true
          cb(t, 'update', subs, branch)
        }
      }

      branch.$ = stamp

      if (t._c) {
        $4215657123_store(t, branch)
      } else if (branch.$tc) {
        delete branch.$tc
        if (branch.$tcl) {
          delete branch.$tcl
        }
        if (branch.$stored) {
          delete branch.$stored
        }
      }
      branch.$t = t
      if (subs.val === 'switch') {
        if ((t.val && typeof t.val === 'object' && t.val.inherits)) {
          branch.$val = $4215657123_switchuid(t)
        } else if (branch.$val) {
          delete branch.$val
        }
      }
      changed = $3975723928_diff(t, subs, cb, branch, void 0, c, oRoot) || changed
    } else if (branch.$c) {
      // console.log('go $c!', branch.$)
      if ($3975723928_diff(t, subs, cb, branch, void 0, branch.$c, oRoot)) {
        changed = true // cover this
        // shallow hack
        // maybe add switch as well?
        if (subs.val === true || subs.val === 'shallow') {
          cb(t, 'update', subs, branch)
        }
      }
    }
  } else if (branch) {
    changed = $2137229723(subs, cb, branch, oRoot) || (subs.val && true)
  }
  return changed
}

const $4215657123_property = (key, t, subs, cb, tree, removed, composite, oRoot) => {
  var changed
  if (removed) {
    const branch = tree[key]
    if (branch) {
      changed = $2137229723(subs, cb, branch, oRoot) || (subs.val && true)
    }
  } else {
    // right here lets go clean
    // t._c
    t = $2621634261_getContextOrigin(t, key, oRoot)
    changed = $4215657123_update(
      key,
      t,
      subs,
      cb,
      tree,
      composite,
      void 0,
      oRoot
    )
  }
  return changed
}



var $4215657123_$ALL$ = {
  property: $4215657123_property,
  update: $4215657123_update
}
;






const $2247350659_inherits = (key, t, index) => {
  var i = 0
  while (i < index && t && typeof t === 'object' && t.inherits) {
    i++
    if (key in t) {
      return false
    }
    t = t.val
  }
  return true
}

const $2247350659_parseKeys = (t, oRoot) => {
  var keys = $466859286_getKeys(t)
  var orig = t
  t = $958575751_contextOrigin(t, oRoot)
  if (t && typeof t === 'object' && t.inherits) {
    let combined
    let index = 1
    while (t && typeof t === 'object' && t.inherits) {
      let k = $466859286_getKeys(t)
      let kl = k && k.length
      if (kl) {
        if (!combined) {
          if (keys) {
            combined = []
            for (let j = 0, len = keys.length; j < len; j++) {
              combined[j] = keys[j]
            }
            for (let i = 0; i < kl; i++) {
              if ($2247350659_inherits(k[i], orig, index)) {
                combined.push(k[i])
              }
            }
          } else {
            keys = k
          }
        } else {
          for (let i = 0; i < kl; i++) {
            if ($2247350659_inherits(k[i], orig, index)) {
              combined.push(k[i])
            }
          }
        }
      }
      index++
      t = t.val
    }
    return combined || keys
  }
  return keys
}

// const diff = (t, subs, cb, tree, removed, composite, oRoot) => {

const $2247350659_composite = (key, t, subs, cb, branch, removed, c, oRoot) => {
  var changed
  const keys = branch.$keys
  if (subs.$keys && subs.$keys.val) {
    const dKey = '$keys' + key
    if (c[dKey] && $3975723928_diff(t, subs.$keys, cb, branch[dKey], void 0, void 0, oRoot)) {
      $2247350659_any(key, t, subs, cb, branch._p, removed, oRoot)
    } else {
      for (let k in c) {
        const target = keys[k]
        if (
          k !== dKey &&
          $4215657123_update(k, target.$t, subs, cb, keys, target.$c, branch, oRoot)
        ) {
          changed = true
        }
      }
    }
  } else {
    for (let k in c) {
      const target = keys[k]
      if (target) {
        if ($4215657123_update(k, target.$t, subs, cb, keys, target.$c, branch, oRoot)) {
          changed = true
        }
      }
    }
  }
  return changed
}

const $2247350659_any = (key, t, subs, cb, tree, removed, oRoot) => {
  const branch = tree[key]
  var $object
  if (removed || !t) {
    if (branch) {
      $2247350659_removeFields(key, subs, branch, cb, oRoot)
      return true
    }
  } else {
    let keys = $2247350659_parseKeys(t, oRoot)
    if (subs.$keys) {
      if (subs.$keys.val) {
        $object = subs.$keys.$object
        keys = subs.$keys.val(keys || [], t, subs, tree)
      } else {
        keys = subs.$keys(keys || [], t, subs, tree)
      }
    }
    if (keys) {
      if (!branch) {
        if ($object) {
          $2247350659_createObject(key, keys, t, subs, cb, tree, oRoot)
        } else {
          $2247350659_create(key, keys, t, subs, cb, tree, oRoot)
        }
        return true
      } else {
        // $object
        return $object
          ? $2247350659_updateObject(key, keys, t, subs, cb, branch, oRoot)
          : $2247350659_update(key, keys, t, subs, cb, branch, oRoot)
      }
    } else if (branch) {
      if ($object) {
        $2247350659_removeFieldsObject(key, subs, branch, cb, oRoot)
      } else {
        $2247350659_removeFields(key, subs, branch, cb, oRoot)
      }
      return true
    }
  }
}

// AS ARRAY
const $2247350659_create = (key, keys, t, subs, cb, tree, oRoot) => {
  const len = keys.length
  const $keys = new Array(len)
  const branch = tree[key] = { _p: tree, _key: key, $keys }
  for (let i = 0; i < len; i++) {
    let key = keys[i]
    let tt = $2621634261_getContextOrigin(t, key, oRoot)
    $4215657123_update(i, tt, subs, cb, $keys, void 0, branch, oRoot)
  }
  if (subs.$keys && subs.$keys.val) {
    const dKey = '$keys' + key
    const dBranch = branch[dKey] = { _p: branch, _key: dKey }
    $3975723928_diff(t, subs.$keys, cb, dBranch, void 0, void 0, oRoot)
  }
}

const $2247350659_removeFields = (key, subs, branch, cb, oRoot) => {
  const $keys = branch.$keys
  let i = $keys.length
  while (i--) {
    $2137229723(subs, cb, $keys[0], oRoot)
  }
}

const $2247350659_update = (key, keys, t, subs, cb, branch, oRoot) => {
  var changed
  const $keys = branch.$keys
  const len1 = keys.length
  var len2 = $keys.length
  if (len1 > len2) {
    for (let i = 0; i < len1; i++) {
      const key = keys[i]
      if ($4215657123_update(i, $2621634261_getContextOrigin(t, key, oRoot), subs, cb, $keys, void 0, branch, oRoot)) {
        changed = true
      }
    }
  } else {
    for (let i = 0; i < len2; i++) {
      const key = keys[i]
      if (!key) {
        $2137229723(subs, cb, $keys[i], oRoot)
        len2--
        i--
        changed = true
      } else {
        if ($4215657123_update(i, $2621634261_getContextOrigin(t, key, oRoot), subs, cb, $keys, void 0, branch, oRoot)) {
          changed = true
        }
      }
    }
  }
  return changed
}
// ------AS OBJECT
const $2247350659_createObject = (key, keys, t, subs, cb, tree, oRoot) => {
  const len = keys.length
  const $keys = {}
  const branch = tree[key] = { _p: tree, _key: key, $keys }
  for (let i = 0; i < len; i++) {
    let key = keys[i]
    let tt = $2621634261_getContextOrigin(t, key, oRoot)
    $4215657123_update(key, tt, subs, cb, $keys, void 0, branch, oRoot)
  }

  if (subs.$keys && subs.$keys.val) {
    const dKey = '$keys' + key
    const dBranch = branch[dKey] = { _p: branch, _key: dKey }
    $3975723928_diff(t, subs.$keys, cb, dBranch, void 0, void 0, oRoot)
  }
}

const $2247350659_removeFieldsObject = (key, subs, branch, cb, oRoot) => {
  const $keys = branch.$keys
  for (let key$ in $keys) {
    $2137229723(subs, cb, $keys[key$], oRoot)
  }
}

const $2247350659_updateObject = (key$, keys, t, subs, cb, branch, oRoot) => {
  var changed
  const $keys = branch.$keys
  const len1 = keys.length
  const marked = {}
  for (let i = 0; i < len1; i++) {
    let key = keys[i]
    marked[key] = true
    let tt = $2621634261_getContextOrigin(t, key, oRoot)
    if ($4215657123_update(key, tt, subs, cb, $keys, void 0, branch, oRoot)) {
      changed = true
    }
  }
  for (let key in $keys) {
    if (!(key in marked)) {
      $2137229723(subs, cb, $keys[key], oRoot)
    }
  }
  return changed
}

// ---- for composite it is not a difference


var $2247350659_$ALL$ = {
  any: $2247350659_any,
  composite: $2247350659_composite
}
;

var $2032740883 = (t, subs, cb, tree, removed, oRoot) => {
  var branch = tree.root
  if (t && !removed) {
    if (!branch) {
      branch = tree.root = { _key: 'root', _p: tree }
      $2032740883_composite(tree)
    }
    return $3975723928_diff(oRoot, subs, cb, branch, void 0, void 0, oRoot)
  } else if (branch) {
    $3975723928_diff(branch.$t, subs, cb, branch, true, void 0, oRoot)
    return true
  }
}

const $2032740883_composite = tree => {
  var key = 'root'
  while (
    tree._p &&
    (!(tree.$c) ||
    !(key in tree.$c) ||
    tree.$c[key] !== 'root')
  ) {
    let tkey = tree._key
    if (tkey !== 'parent' && tkey !== 'root') {
      if (!('$c' in tree)) { tree.$c = {} }
      tree.$c[key] = 'root'
    }
    key = tkey
    tree = tree._p
  }
}

;




const $1269477831_compositeDriverChange = (key, tkey, t, subs, cb, tree, removed, composite, oRoot) => {
  const branch = tree[key]
  if ($3975723928_diff(t, subs, cb, branch, removed, composite, oRoot)) {
    return $1269477831_body(tkey, t, subs, cb, tree, removed, subs.val, false, composite, oRoot)
  }
}

const $1269477831_$switch = (key, t, subs, cb, tree, removed, composite, oRoot) => {
  var $switch = subs[key]
  if (!$switch) {
    const tkey = key.slice(0, -1) // this means from composite
    $1269477831_compositeDriverChange(key, tkey, t, subs[tkey], cb, tree, removed, composite, oRoot)
  } else {
    if ($switch.val) {
      const dKey = key + '*'
      const driverBranch = tree[dKey]
      if (driverBranch) {
        if ($3975723928_diff(t, $switch, cb, driverBranch, removed, composite, oRoot)) {
          return $1269477831_body(key, t, subs, cb, tree, removed, $switch.val, true, composite, oRoot)
        } else {
          const branch = tree[key]
          if (branch) { $4215657123_update(key, t, branch.$subs, cb, tree, composite, void 0, oRoot) }
        }
      } else if (!driverBranch) {
        if ($1269477831_create(dKey, t, $switch, cb, tree, oRoot)) {
          return $1269477831_body(key, t, subs, cb, tree, removed, $switch.val, true, composite, oRoot)
        }
      }
    } else {
      return $1269477831_body(key, t, subs, cb, tree, removed, $switch, true, composite, oRoot)
    }
  }
}

const $1269477831_create = (key, t, subs, cb, tree, oRoot) => {
  const branch = tree[key] = {
    _p: tree,
    _key: key,
    $subs: subs
  }
  return $3975723928_diff(t, subs, cb, branch, void 0, void 0, oRoot)
}

const $1269477831_body = (key, t, subs, cb, tree, removed, localSwitch, diffIt, composite, oRoot) => {
  var result
  if (!removed && t) { result = localSwitch(t, subs, tree, key) }
  var branch = tree[key]
  if (!result) {
    if (branch) {
      $2137229723(branch.$subs, cb, branch, oRoot)
      return true
    }
  } else {
    if (!branch) {
      $4215657123_update(key, t, result, cb, tree, void 0, void 0, oRoot)
      branch = tree[key]
      branch.$subs = result
      branch.$origin = $958575751_contextOrigin(t, oRoot)
      return true
    } else if ($1269477831_isSwitched(branch.$subs, result, branch, t, oRoot)) {
      $2137229723(branch.$subs, cb, branch, oRoot)
      $4215657123_update(key, t, result, cb, tree, void 0, void 0, oRoot)
      branch = tree[key]
      branch.$subs = result
      branch.$origin = $958575751_contextOrigin(t, oRoot)
      return true
    } else if (diffIt) {
      return $4215657123_update(key, t, result, cb, tree, composite, void 0, oRoot)
    }
  }
}

const $1269477831_isSwitched = (a, b, branch, t, oRoot) => {
  if (t) {
    const o = $958575751_contextOrigin(t, oRoot)
    const b = branch.$origin
    if (b !== o) {
      branch.$origin = o
      return true
    }
  }
  if (a === b) {
    return false // test
  } else {
    if (a._) {
      return a._ !== b._
    }
    for (let key in a) {
      if (a[key] !== b[key]) {
        if (typeof a[key] === 'function' && typeof b[key] === 'function') {
          if (a[key].toString() !== b[key].toString()) {
            return true
          }
        } else if (typeof a[key] !== 'object' || typeof b[key] !== 'object' || $1269477831_isSwitched(a[key], b[key], void 0, void 0, oRoot)) {
          return true
        }
      }
    }
    for (let key in b) {
      if (key !== 'props' && !a[key]) { return true }
    }
  }
}

var $1269477831 = $1269477831_$switch

;



var $3087050025 = (t, subs, cb, tree, removed, oRoot) => {
  var branch = tree.parent
  if (!removed && t) {
    if (!branch) {
      branch = tree.parent = { _p: tree, _key: 'parent' }
      $3087050025_composite(tree)
    }
    const parent = $3087050025_getParent(t, tree, oRoot)
    const c = $3975723928_diff(parent, subs, cb, branch, void 0, void 0, oRoot)
    return c
  } else if (branch) {
    $3975723928_diff(branch.$t, subs, cb, branch, true, void 0, oRoot)
    return true
  }
}

const $3087050025_get = (t, path, oRoot) => {
  let i = path.length
  while (i--) {
    if (path[i] === 'root') {
      t = $1695496138_root(t)
    } else {
      t = $2621634261_getContextOrigin(t, path[i], oRoot)
    }
  }
  return t
}

const $3087050025_getParent = (t, tree, oRoot) => {
  var path = []
  var cnt = 1
  var i = 0
  while (tree) {
    if (tree._key !== void 0) {
      if (tree._key[0] !== '$') {
        if (tree._key === 'parent') {
          cnt++
        } else {
          if (cnt) {
            cnt--
          } else {
            path[i++] = tree._key
          }
        }
      } else if (tree._key.indexOf('any') === 1 && path.length) {
        // refactor this a little but later
        path[0] = tree.$keys[path[0]] ? tree.$keys[path[0]].$t.key : path[0]
      }
    }
    tree = tree._p
  }
  return $3087050025_get($1695496138_root(t), path, oRoot)
}

const $3087050025_composite = tree => {
  var key = 'parent'
  var parentcounter = 1
  while (tree._p && parentcounter) {
    let tkey = tree._key
    if (tkey !== 'parent') {
      if (parentcounter === 1 && tkey !== 'root') {
        if (!tree.$c) { tree.$c = {} }
        if (!(key in tree.$c) || tree.$c[key] !== 'root') {
          tree.$c[key] = 'parent'
        }
      }
      key = tkey
      tree = tree._p
      if (key[0] !== '$') {
        parentcounter--
      }
    } else {
      parentcounter++
      tree = tree._p
    }
  }
}

;





const $3975723928_diff = (t, subs, cb, tree, removed, composite, oRoot) => {
  var changed
  if (composite) {
    for (let key in composite) {
      if (key in tree) {
        const branch = tree[key]
        const c = branch.$c
        if (c) {
          if (key.indexOf('$any') === 0) {
            changed = $2247350659_composite(key, t, subs[key], cb, branch, removed, c, oRoot)
          } else if ($3975723928_parse(key, t, subs, cb, tree, removed, c, oRoot)) {
            changed = true
          }
        } else {
          if ($3975723928_parse(key, t, subs, cb, tree, removed, void 0, oRoot)) {
            changed = true
          }
        }
      }
    }
  } else {
    for (let key in subs) {
      if (key !== 'val' && key !== 'props' && key !== '_' && key !== '$blockRemove' && key !== '$keys') {
        if ($3975723928_parse(key, t, subs, cb, tree, removed, composite, oRoot)) {
          changed = true
        }
      }
    }
  }
  return changed
}

const $3975723928_parse = (key, t, subs, cb, tree, removed, composite, oRoot) => {
  if (key === 'root') {
    return $2032740883(t, subs.root, cb, tree, removed, oRoot)
  } else if (key === 'parent') {
    return $3087050025(t, subs.parent, cb, tree, removed, oRoot)
  } else if (key[0] === '$') {
    if (key.indexOf('any') === 1) {
      return $2247350659_any(key, t, subs[key], cb, tree, removed, oRoot)
    } else if (key.indexOf('switch') === 1) {
      return $1269477831(key, t, subs, cb, tree, removed, composite, oRoot)
    }
  } else {
    return $4215657123_property(key, t, subs[key], cb, tree, removed, composite, oRoot)
  }
}



var $3975723928_$ALL$ = {
  diff: $3975723928_diff,
  parse: $3975723928_parse
}
;


const $3203877739_listen = (t, fn) => t.subscriptions.push(fn)

// add ref supports here -- use references field in prop or even simpler
const $3203877739_subscribe = (t, subs, cb, tree) => {
  if (!t.subscriptions) t.subscriptions = []
  if (!tree) tree = {}
  t._c = null
  t._cLevel = null
  tree.$t = t
  if (subs.val) {
    if (subs.val === true || subs.val === 'shallow') {
      $3203877739_listen(t, () => {
        t._c = null
        t._cLevel = null
        cb(t, 'update', subs, tree)
        $3975723928_diff(t, subs, cb, tree, void 0, void 0, t)
      })
    } else {
      $3203877739_listen(t, () => $3975723928_diff(t, subs, cb, tree, void 0, void 0, $1695496138_realRoot(t)))
    }
    cb(t, 'new', subs, tree)
  } else {
    $3203877739_listen(t, () => $3975723928_diff(t, subs, cb, tree, void 0, void 0, $1695496138_realRoot(t)))
  }
  $3975723928_diff(t, subs, cb, tree, void 0, void 0, $1695496138_realRoot(t))
  return tree
}

const $3203877739_parse = (subs) => {
  if (subs) {
    if (subs === true) return { val: true }
    const result = {}
    for (let key in subs) {
      let sub = subs[key]
      if (key === 'val' || key === '_' || key === '$blockRemove') {
        result[key] = sub
      } else {
        let type = typeof sub
        if (type === 'object') {
          result[key] = $3203877739_parse(sub)
        } else if (type === 'function') {
          result[key] = sub
        } else {
          result[key] = { val: sub }
        }
      }
    }
    return result
  }
}



var $3203877739_$ALL$ = {
  subscribe: $3203877739_subscribe,
  parse: $3203877739_parse
}
;



const $2664996580_compute = (t, result) => {
  const computed = t.compute()
  return computed !== void 0 && typeof computed !== 'object' ? computed : result
}

const $2664996580_serialize = (t, fn) => {
  var result = {}
  var val = $2621634261_getVal(t)
  const keys = $466859286_getKeys(t)
  if (val && typeof val === 'object' && val.inherits) {
    const p = $1695496138_path(val) // memoized paths later
    val = [ '@', 'root' ]
    let i = p.length
    while (i--) { val[i + 2] = p[i] }
    if (t.root().key) {
      val.splice(2, 1)
    }
  }
  if (keys) {
    let onlyNumbers = true
    for (let i = 0, len = keys.length; i < len; i++) {
      let key = keys[i]
      let keyResult = $2664996580_serialize($2621634261_get(t, key), fn)
      if (isNaN(key)) onlyNumbers = false
      if (keyResult !== void 0) { result[key] = keyResult }
    }
    if (val !== void 0) {
      result.val = val
    } else if (onlyNumbers) {
      const arr = []
      for (let i in result) arr[i] = result[i]
      result = arr
    }
  } else if (val !== void 0) {
    result = val
  }
  return fn ? fn === true ? $2664996580_compute(t, result) : fn(t, result) : result
}

var $2664996580 = $2664996580_serialize

;


const $3707265278_mapper = (t) => ($466859286_getKeys(t) || []).map(key => $2621634261_get(t, key))

var $3707265278 = {
  map (fn, callee) {
    return ($466859286_getKeys(this) || []).map((val, key, array) => fn($2621634261_get(this, val), key, array))
  },
  reduce (fn, start) {
    return $3707265278_mapper(this).reduce(fn, start)
  },
  filter (fn) {
    return $3707265278_mapper(this).filter(fn)
  },
  slice (start, end) {
    return $3707265278_mapper(this).slice(start, end)
  },
  sort (fn) {
    return $3707265278_mapper(this).sort(fn)
  },
  reverse (fn) {
    return $3707265278_mapper(this).reverse(fn)
  },
  find (val) {
    const keys = $466859286_getKeys(this)
    if (keys) {
      for (let i = 0, len = keys.length; i < len; i++) {
        const r = $2621634261_get(this, keys[i])
        if (val(r, i, this)) return r
      }
    }
  },
  some (val) {
    const keys = $466859286_getKeys(this)
    if (keys) {
      for (let i = 0, len = keys.length; i < len; i++) {
        const r = $2621634261_get(this, keys[i])
        if (val(r, i, this)) return true
      }
    }
    return false
  },
  every (val) {
    const keys = $466859286_getKeys(this)
    if (keys) {
      for (let i = 0, len = keys.length; i < len; i++) {
        if (!val($2621634261_get(this, keys[i]), i, this)) return false
      }
    }
    return true
  },
  findIndex (val) {
    const keys = $466859286_getKeys(this)
    if (keys) {
      for (let i = 0, len = keys.length; i < len; i++) {
        if (val($2621634261_get(this, keys[i]), i, this)) return i
      }
    }
    return -1
  },
  indexOf (val) {
    const keys = $466859286_getKeys(this)
    if (keys) {
      for (let i = 0, len = keys.length; i < len; i++) {
        const r = $2621634261_get(this, keys[i])
        if (r.compute() === val || r === val) return i
      }
    }
    return -1
  },
  lastIndexOf (val) {
    const keys = $466859286_getKeys(this)
    if (keys) {
      let i = keys.length
      while (i--) {
        const r = $2621634261_get(this, keys[i])
        if (r.compute() === val || r === val) return i
      }
    }
    return -1
  },
  includes (val, index = 0) {
    const keys = $466859286_getKeys(this)
    if (keys) {
      for (let len = keys.length, i = index > -1 ? index : Math.max(len + index, 0); i < len; i++) {
        const r = $2621634261_get(this, keys[i])
        if (r.compute() === val || r === val) return true
      }
    }
    return false
  },
  forEach (fn) {
    var keys = $466859286_getKeys(this)
    if (keys) {
      keys = keys.concat()  // bit slow but usefull for remove for example
      for (let i = 0, len = keys.length; i < len; i++) {
        const key = keys[i]
        const r = $2621634261_get(this, key)
        if (r) { fn(r, key, this) }
      }
    }
  }
}

;


var $481288723 = struct => {
  if (typeof Symbol !== 'undefined') {
    struct.Constructor.prototype[Symbol.iterator] = function () {
      const keys = $466859286_getKeys(this)
      const t = this
      var i = 0
      return {
        throw: () => {},
        // add handle for removal / change of keys
        next: () => ({
          value: $2621634261_get(t, keys[i++]),
          done: i === keys.length + 1
        })
      }
    }
  }
}

;// dont add this in the browser




const $4025957895_define = {
  inspect () {
    if (this._noInspect_) {
      return this
    }
    var keys = $466859286_getKeys(this)
    var val = this.val
    const p = $1695496138_path(this)
    var type = $2621634261_get(this, 'type').compute()
    const start = type && type[0].toUpperCase() + type.slice(1) + ' ' + (p.length ? `${p.join('.')} ` : '')
    if (val && typeof val === 'object' && val.inherits) {
      val = val.inspect()
    }
    if (keys) {
      if (keys.length > 10) {
        const len = keys.length
        keys = keys.slice(0, 5)
        keys.push('... ' + (len - 5) + ' more items')
      }
      return val
        ? `${start}{ val: ${val}, ${keys.join(', ')} }`
        : `${start}{ ${keys.join(', ')} }`
    } else {
      return val
        ? `${start}{ val: ${val} }`
        : `${start}{ }`
    }
  }
}

var $4025957895 = {
  define: $4025957895_define,
  props: { default: 'self', _noInspect_: true }
}

;














// add puid as default
// never use chain maybe remove it -- lets remove
const $3362410831_chain = (c, t) => c === null || c && c !== true ? c : t

var $3362410831_listenerId = 0

const $3362410831_inject = [ { define: $3707265278 }, $481288723, $4025957895 ]

const $3362410831_define = {
  applyContext (context) { return $2633820941_applyContext(this, context) },
  storeContext () { return $2633820941_storeContext(this) },
  serialize (fn) { return $2664996580(this, fn) },
  toJSON (fn) {
    if (typeof fn !== 'function') {
      fn = true
    }
    return JSON.stringify($2664996580(this, fn), null, 2)
  },
  root (real) { return $1695496138_root(this, real) },
  path (real) { return $1695496138_path(this, real) },
  parent (fn) {
    if (fn !== void 0) {
      if (typeof fn === 'function') {
        let p = this
        while (p) {
          let result = fn(p)
          if (result) { return result }
          p = $1695496138_parent(p)
        }
      } else {
        let p = this
        while (fn-- && p) { p = $1695496138_parent(p) }
        return p
      }
    } else {
      return $1695496138_parent(this)
    }
  },
  emit (type, val, stamp) {
    if (stamp === void 0) {
      $2092109398_generic(this, type, val, $826337949.create())
      $826337949.close()
    } else {
      $2092109398_generic(this, type, val, stamp)
    }
    return this
  },
  toString () {
    const r = this.compute()
    if (typeof r === 'object' || r === void 0) {
      return ''
    } if (!isNaN(r)) {
      return r + ''
    } else {
      return r
    }
  },
  subscribe (subs, cb, raw, tree) {
    return $3203877739_subscribe(this, !raw ? $3203877739_parse(subs) : subs, cb, tree)
  },
  once (check, callback) {
    return $2030617653(this, check, callback)
  },
  on (type, val, id) {
    if (typeof type === 'function') {
      id = val
      val = type
      type = 'data'
    }
    if (!id) { id = ++$3362410831_listenerId }
    const temp = { on: {} } // problem with bublé cant set [type] : { [id] }
    temp.on[type] = {}
    temp.on[type][id] = val
    return $3362410831_chain($4292174816_set(this, temp), this)
  },
  set: function (val, stamp, reset, noConflict) { // function fixes buble
    if (stamp === void 0) {
      const ret = $3362410831_chain($4292174816_set(this, val, $826337949.create(), void 0, reset, noConflict), this)
      $826337949.close()
      return ret
    } else {
      return $3362410831_chain($4292174816_set(this, val, stamp, void 0, reset, noConflict), this)
    }
  },
  create (val, stamp, reset, noConflict) { // add all fields here
    if (stamp === void 0) {
      const ret = $4292174816_create(this, val, $826337949.create(), void 0, void 0, reset, noConflict)
      $826337949.close()
      return ret
    } else {
      return $4292174816_create(this, val, stamp, void 0, void 0, reset, noConflict)
    }
  },
  // add api as a method perhaps?
  get (key, val, stamp) { return $3815974835(this, key, val, stamp) },
  push (val, stamp) {
    const key = $826337949.create()
    if (stamp === void 0) {
      const ret = $3362410831_chain($4292174816_set(this, { [key]: val }, key), this)[key]
      $826337949.close()
      return ret
    } else {
      return $3362410831_chain($4292174816_set(this, { [key]: val }, stamp), this)[key]
    }
  },
  compute: function (val, passon, arg) { return $958575751_compute(this, val, passon, arg) }, // function fixes buble
  origin () { return $958575751_origin(this) },
  keys () { return $466859286_getKeys(this) || [] }
}

var $3362410831 = { inject: $3362410831_inject, define: $3362410831_define }

;










// //  remove cuid not used anywhere anymore




const $3269461964_emitterProperty = $3707563476.props.on.struct.props.default
$4292174816_set($3707563476, { inject: $3362410831 })

const $3269461964_create = (val, stamp, t = $3707563476, parent, key) =>
  $4292174816_create(t, val, stamp, parent, key)


var $3269461964_subscribe = $3203877739_subscribe;var $3269461964_parse = $3203877739_parse;var $3269461964_compute = $958575751_compute;var $3269461964_emit = $2092109398_generic;var $3269461964_set = $4292174816_set;var $3269461964_struct = $3707563476;var $3269461964_property = $624523381_property;var $3269461964_contextProperty = $2633820941_contextProperty;var $3269461964_switchInheritance = $2264940719_switchInheritance;var $3269461964_get = $2621634261_get;var $3269461964_getOrigin = $2621634261_getOrigin;var $3269461964_getRefVal = $2164199530_getRefVal;var $3269461964_getProperty = $624523381_getProp;var $3269461964_getKeys = $466859286_getKeys;var $3269461964_removeContextKey = $466859286_removeContextKey;var $3269461964_addKey = $466859286_addKey;var $3269461964_removeKey = $466859286_removeKey;var $3269461964_getType = $2411079736;var $3269461964_getVal = $2621634261_getVal;var $3269461964_uid = $3258224650_uid;var $3269461964_cuid = $3258224650_cuid;var $3269461964_puid = $3258224650_puid;
var $3269461964_$ALL$ = {
  subscribe: $3203877739_subscribe,
  parse: $3203877739_parse,
  create: $3269461964_create,
  compute: $958575751_compute,
  emit: $2092109398_generic,
  set: $4292174816_set,
  struct: $3707563476,
  property: $624523381_property,
  contextProperty: $2633820941_contextProperty,
  emitterProperty: $3269461964_emitterProperty,
  switchInheritance: $2264940719_switchInheritance,
  get: $2621634261_get,
  getOrigin: $2621634261_getOrigin,
  getRefVal: $2164199530_getRefVal,
  getProperty: $624523381_getProp,
  getKeys: $466859286_getKeys,
  removeContextKey: $466859286_removeContextKey,
  addKey: $466859286_addKey,
  removeKey: $466859286_removeKey,
  getType: $2411079736,
  getVal: $2621634261_getVal,
  uid: $3258224650_uid,
  cuid: $3258224650_cuid,
  puid: $3258224650_puid
}

module.exports = $3269461964_$ALL$